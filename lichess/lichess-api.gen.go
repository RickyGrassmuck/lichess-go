// Package lichess provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package lichess

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)


func (c *Client) AntichessAtomic(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAntichessAtomicRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountEmail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountEmailRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountKid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountKidRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountKidPost(ctx context.Context, params *AccountKidPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountKidPostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiAccountPlaying(ctx context.Context, params *ApiAccountPlayingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiAccountPlayingRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Account(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BoardGameStream(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBoardGameStreamRequest(c.Server, gameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BoardGameAbort(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBoardGameAbortRequest(c.Server, gameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BoardGameChatGet(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBoardGameChatGetRequest(c.Server, gameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BoardGameChatPostWithBody(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBoardGameChatPostRequestWithBody(c.Server, gameId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BoardGameClaimVictory(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBoardGameClaimVictoryRequest(c.Server, gameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BoardGameDraw(ctx context.Context, gameId string, accept bool, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBoardGameDrawRequest(c.Server, gameId, accept)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BoardGameMove(ctx context.Context, gameId string, move string, params *BoardGameMoveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBoardGameMoveRequest(c.Server, gameId, move, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BoardGameResign(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBoardGameResignRequest(c.Server, gameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BoardGameTakeback(ctx context.Context, gameId string, accept bool, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBoardGameTakebackRequest(c.Server, gameId, accept)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiBoardSeekWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiBoardSeekRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BotAccountUpgrade(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBotAccountUpgradeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BotGameStream(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBotGameStreamRequest(c.Server, gameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BotGameAbort(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBotGameAbortRequest(c.Server, gameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BotGameChatWithBody(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBotGameChatRequestWithBody(c.Server, gameId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BotGameMove(ctx context.Context, gameId string, move string, params *BotGameMoveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBotGameMoveRequest(c.Server, gameId, move, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BotGameResign(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBotGameResignRequest(c.Server, gameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiBotOnline(ctx context.Context, params *ApiBotOnlineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiBotOnlineRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastIndex(ctx context.Context, params *BroadcastIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastRoundPgn(ctx context.Context, broadcastRoundId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastRoundPgnRequest(c.Server, broadcastRoundId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastAllRoundsPgn(ctx context.Context, broadcastTournamentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastAllRoundsPgnRequest(c.Server, broadcastTournamentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkPairingGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkPairingGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkPairingCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkPairingCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkPairingDelete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkPairingDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkPairingStartClocks(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkPairingStartClocksRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChallengeList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChallengeListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChallengeAiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChallengeAiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChallengeOpenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChallengeOpenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChallengeAccept(ctx context.Context, challengeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChallengeAcceptRequest(c.Server, challengeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChallengeCancel(ctx context.Context, challengeId string, params *ChallengeCancelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChallengeCancelRequest(c.Server, challengeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChallengeDeclineWithBody(ctx context.Context, challengeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChallengeDeclineRequestWithBody(c.Server, challengeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChallengeStartClocks(ctx context.Context, gameId string, params *ChallengeStartClocksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChallengeStartClocksRequest(c.Server, gameId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChallengeCreateWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChallengeCreateRequestWithBody(c.Server, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiCloudEval(ctx context.Context, params *ApiCloudEvalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiCloudEvalRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiCrosstable(ctx context.Context, user1 string, user2 string, params *ApiCrosstableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiCrosstableRequest(c.Server, user1, user2, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiGamesUser(ctx context.Context, username string, params *ApiGamesUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiGamesUserRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GameImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGameImportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPuzzleActivity(ctx context.Context, params *ApiPuzzleActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPuzzleActivityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPuzzleDaily(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPuzzleDailyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiPuzzleDashboard(ctx context.Context, days int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiPuzzleDashboardRequest(c.Server, days)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FollowUser(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFollowUserRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiUserFollowing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiUserFollowingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnfollowUser(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnfollowUserRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoundAddTime(ctx context.Context, gameId string, seconds string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoundAddTimeRequest(c.Server, gameId, seconds)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSimul(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSimulRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiStormDashboard(ctx context.Context, username string, params *ApiStormDashboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiStormDashboardRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastStreamRoundPgn(ctx context.Context, broadcastRoundId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastStreamRoundPgnRequest(c.Server, broadcastRoundId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiStreamEvent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiStreamEventRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StreamGame(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStreamGameRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GamesByUsersWithBody(ctx context.Context, params *GamesByUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGamesByUsersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StudyAllChaptersPgn(ctx context.Context, studyId string, params *StudyAllChaptersPgnParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStudyAllChaptersPgnRequest(c.Server, studyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSwissNewWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSwissNewRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSwissUpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSwissUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GamesBySwiss(ctx context.Context, id string, params *GamesBySwissParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGamesBySwissRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSwissJoinWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSwissJoinRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResultsBySwiss(ctx context.Context, id string, params *ResultsBySwissParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResultsBySwissRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiSwissTerminate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiSwissTerminateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamAll(ctx context.Context, params *TeamAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamOfUsername(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamOfUsernameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamSearch(ctx context.Context, params *TeamSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamShow(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamShowRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiTeamSwiss(ctx context.Context, teamId string, params *ApiTeamSwissParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiTeamSwissRequest(c.Server, teamId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamIdUsers(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamIdUsersRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiTokenDelete(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiTokenDeleteRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminChallengeTokensWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminChallengeTokensRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}



func (c *Client) TvChannels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTvChannelsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TvFeed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTvFeedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TvChannelGames(ctx context.Context, channel string, params *TvChannelGamesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTvChannelGamesRequest(c.Server, channel, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}



func (c *Client) TablebaseAtomic(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTablebaseAtomicRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastTourCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastTourCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastRoundUpdateWithBody(ctx context.Context, broadcastRoundId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastRoundUpdateRequestWithBody(c.Server, broadcastRoundId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastPushWithBody(ctx context.Context, broadcastRoundId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastPushRequestWithBody(c.Server, broadcastRoundId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastTourUpdateWithBody(ctx context.Context, broadcastTournamentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastTourUpdateRequestWithBody(c.Server, broadcastTournamentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastRoundCreateWithBody(ctx context.Context, broadcastTournamentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastRoundCreateRequestWithBody(c.Server, broadcastTournamentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastRoundGet(ctx context.Context, broadcastTournamentSlug string, broadcastRoundSlug string, broadcastRoundId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastRoundGetRequest(c.Server, broadcastTournamentSlug, broadcastRoundSlug, broadcastRoundId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastTourGet(ctx context.Context, slug string, broadcastTournamentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastTourGetRequest(c.Server, slug, broadcastTournamentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GamePgn(ctx context.Context, gameId string, params *GamePgnParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGamePgnRequest(c.Server, gameId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GamesExportIdsWithBody(ctx context.Context, params *GamesExportIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGamesExportIdsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InboxUsernameWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInboxUsernameRequestWithBody(c.Server, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpeningExplorerLichess(ctx context.Context, params *OpeningExplorerLichessParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpeningExplorerLichessRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpeningExplorerMasterGame(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpeningExplorerMasterGameRequest(c.Server, gameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpeningExplorerMaster(ctx context.Context, params *OpeningExplorerMasterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpeningExplorerMasterRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Oauth(ctx context.Context, params *OauthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOauthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Player(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlayerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlayerTopNbPerfType(ctx context.Context, nb int, perfType PlayerTopNbPerfTypeParamsPerfType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlayerTopNbPerfTypeRequest(c.Server, nb, perfType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OpeningExplorerPlayer(ctx context.Context, params *OpeningExplorerPlayerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOpeningExplorerPlayerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TablebaseStandard(ctx context.Context, params *TablebaseStandardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTablebaseStandardRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StreamerLive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStreamerLiveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StudyExportAllPgn(ctx context.Context, username string, params *StudyExportAllPgnParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStudyExportAllPgnRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StudyChapterPgn(ctx context.Context, studyId string, chapterId string, params *StudyChapterPgnParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStudyChapterPgnRequest(c.Server, studyId, chapterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SwissTrf(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSwissTrfRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamIdJoinWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamIdJoinRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamIdKickUserId(ctx context.Context, teamId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamIdKickUserIdRequest(c.Server, teamId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamIdPmAllWithBody(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamIdPmAllRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamIdQuit(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamIdQuitRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAntichessAtomicRequest generates requests for AntichessAtomic
func NewAntichessAtomicRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/antichess")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountMeRequest generates requests for AccountMe
func NewAccountMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountEmailRequest generates requests for AccountEmail
func NewAccountEmailRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountKidRequest generates requests for AccountKid
func NewAccountKidRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/kid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountKidPostRequest generates requests for AccountKidPost
func NewAccountKidPostRequest(server string, params *AccountKidPostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/kid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "v", runtime.ParamLocationQuery, params.V); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiAccountPlayingRequest generates requests for ApiAccountPlaying
func NewApiAccountPlayingRequest(server string, params *ApiAccountPlayingParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/playing")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Nb != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nb", runtime.ParamLocationQuery, *params.Nb); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountRequest generates requests for Account
func NewAccountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/account/preferences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBoardGameStreamRequest generates requests for BoardGameStream
func NewBoardGameStreamRequest(server string, gameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/board/game/stream/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBoardGameAbortRequest generates requests for BoardGameAbort
func NewBoardGameAbortRequest(server string, gameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/board/game/%s/abort", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBoardGameChatGetRequest generates requests for BoardGameChatGet
func NewBoardGameChatGetRequest(server string, gameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/board/game/%s/chat", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBoardGameChatPostRequestWithBody generates requests for BoardGameChatPost with any type of body
func NewBoardGameChatPostRequestWithBody(server string, gameId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/board/game/%s/chat", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBoardGameClaimVictoryRequest generates requests for BoardGameClaimVictory
func NewBoardGameClaimVictoryRequest(server string, gameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/board/game/%s/claim-victory", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBoardGameDrawRequest generates requests for BoardGameDraw
func NewBoardGameDrawRequest(server string, gameId string, accept bool) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accept", runtime.ParamLocationPath, accept)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/board/game/%s/draw/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBoardGameMoveRequest generates requests for BoardGameMove
func NewBoardGameMoveRequest(server string, gameId string, move string, params *BoardGameMoveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "move", runtime.ParamLocationPath, move)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/board/game/%s/move/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OfferingDraw != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offeringDraw", runtime.ParamLocationQuery, *params.OfferingDraw); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBoardGameResignRequest generates requests for BoardGameResign
func NewBoardGameResignRequest(server string, gameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/board/game/%s/resign", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBoardGameTakebackRequest generates requests for BoardGameTakeback
func NewBoardGameTakebackRequest(server string, gameId string, accept bool) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accept", runtime.ParamLocationPath, accept)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/board/game/%s/takeback/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiBoardSeekRequestWithBody generates requests for ApiBoardSeek with any type of body
func NewApiBoardSeekRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/board/seek")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBotAccountUpgradeRequest generates requests for BotAccountUpgrade
func NewBotAccountUpgradeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bot/account/upgrade")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBotGameStreamRequest generates requests for BotGameStream
func NewBotGameStreamRequest(server string, gameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bot/game/stream/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBotGameAbortRequest generates requests for BotGameAbort
func NewBotGameAbortRequest(server string, gameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bot/game/%s/abort", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBotGameChatRequestWithBody generates requests for BotGameChat with any type of body
func NewBotGameChatRequestWithBody(server string, gameId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bot/game/%s/chat", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBotGameMoveRequest generates requests for BotGameMove
func NewBotGameMoveRequest(server string, gameId string, move string, params *BotGameMoveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "move", runtime.ParamLocationPath, move)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bot/game/%s/move/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OfferingDraw != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offeringDraw", runtime.ParamLocationQuery, *params.OfferingDraw); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBotGameResignRequest generates requests for BotGameResign
func NewBotGameResignRequest(server string, gameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bot/game/%s/resign", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiBotOnlineRequest generates requests for ApiBotOnline
func NewApiBotOnlineRequest(server string, params *ApiBotOnlineParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bot/online")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Nb != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nb", runtime.ParamLocationQuery, *params.Nb); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBroadcastIndexRequest generates requests for BroadcastIndex
func NewBroadcastIndexRequest(server string, params *BroadcastIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/broadcast")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Nb != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nb", runtime.ParamLocationQuery, *params.Nb); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBroadcastRoundPgnRequest generates requests for BroadcastRoundPgn
func NewBroadcastRoundPgnRequest(server string, broadcastRoundId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "broadcastRoundId", runtime.ParamLocationPath, broadcastRoundId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/broadcast/round/%s.pgn", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBroadcastAllRoundsPgnRequest generates requests for BroadcastAllRoundsPgn
func NewBroadcastAllRoundsPgnRequest(server string, broadcastTournamentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "broadcastTournamentId", runtime.ParamLocationPath, broadcastTournamentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/broadcast/%s.pgn", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBulkPairingGetRequest generates requests for BulkPairingGet
func NewBulkPairingGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bulk-pairing")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBulkPairingCreateRequestWithBody generates requests for BulkPairingCreate with any type of body
func NewBulkPairingCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bulk-pairing")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBulkPairingDeleteRequest generates requests for BulkPairingDelete
func NewBulkPairingDeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bulk-pairing/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBulkPairingStartClocksRequest generates requests for BulkPairingStartClocks
func NewBulkPairingStartClocksRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/bulk-pairing/%s/start-clocks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChallengeListRequest generates requests for ChallengeList
func NewChallengeListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/challenge")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChallengeAiRequestWithBody generates requests for ChallengeAi with any type of body
func NewChallengeAiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/challenge/ai")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewChallengeOpenRequestWithBody generates requests for ChallengeOpen with any type of body
func NewChallengeOpenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/challenge/open")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewChallengeAcceptRequest generates requests for ChallengeAccept
func NewChallengeAcceptRequest(server string, challengeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "challengeId", runtime.ParamLocationPath, challengeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/challenge/%s/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChallengeCancelRequest generates requests for ChallengeCancel
func NewChallengeCancelRequest(server string, challengeId string, params *ChallengeCancelParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "challengeId", runtime.ParamLocationPath, challengeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/challenge/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OpponentToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opponentToken", runtime.ParamLocationQuery, *params.OpponentToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChallengeDeclineRequestWithBody generates requests for ChallengeDecline with any type of body
func NewChallengeDeclineRequestWithBody(server string, challengeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "challengeId", runtime.ParamLocationPath, challengeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/challenge/%s/decline", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewChallengeStartClocksRequest generates requests for ChallengeStartClocks
func NewChallengeStartClocksRequest(server string, gameId string, params *ChallengeStartClocksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/challenge/%s/start-clocks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token1 != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token1", runtime.ParamLocationQuery, *params.Token1); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Token2 != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token2", runtime.ParamLocationQuery, *params.Token2); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChallengeCreateRequestWithBody generates requests for ChallengeCreate with any type of body
func NewChallengeCreateRequestWithBody(server string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/challenge/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiCloudEvalRequest generates requests for ApiCloudEval
func NewApiCloudEvalRequest(server string, params *ApiCloudEvalParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/cloud-eval")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fen", runtime.ParamLocationQuery, params.Fen); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.MultiPv != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "multiPv", runtime.ParamLocationQuery, *params.MultiPv); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Variant != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "variant", runtime.ParamLocationQuery, *params.Variant); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiCrosstableRequest generates requests for ApiCrosstable
func NewApiCrosstableRequest(server string, user1 string, user2 string, params *ApiCrosstableParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user1", runtime.ParamLocationPath, user1)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user2", runtime.ParamLocationPath, user2)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/crosstable/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Matchup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchup", runtime.ParamLocationQuery, *params.Matchup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiGamesUserRequest generates requests for ApiGamesUser
func NewApiGamesUserRequest(server string, username string, params *ApiGamesUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/games/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Until != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "until", runtime.ParamLocationQuery, *params.Until); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Max != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Vs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vs", runtime.ParamLocationQuery, *params.Vs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Rated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rated", runtime.ParamLocationQuery, *params.Rated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerfType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perfType", runtime.ParamLocationQuery, *params.PerfType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Color != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "color", runtime.ParamLocationQuery, *params.Color); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Analysed != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "analysed", runtime.ParamLocationQuery, *params.Analysed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Moves != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "moves", runtime.ParamLocationQuery, *params.Moves); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PgnInJson != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pgnInJson", runtime.ParamLocationQuery, *params.PgnInJson); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Clocks != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clocks", runtime.ParamLocationQuery, *params.Clocks); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Evals != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evals", runtime.ParamLocationQuery, *params.Evals); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Opening != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opening", runtime.ParamLocationQuery, *params.Opening); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ongoing != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ongoing", runtime.ParamLocationQuery, *params.Ongoing); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Finished != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finished", runtime.ParamLocationQuery, *params.Finished); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Players != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "players", runtime.ParamLocationQuery, *params.Players); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGameImportRequestWithBody generates requests for GameImport with any type of body
func NewGameImportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiPuzzleActivityRequest generates requests for ApiPuzzleActivity
func NewApiPuzzleActivityRequest(server string, params *ApiPuzzleActivityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/puzzle/activity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Max != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPuzzleDailyRequest generates requests for ApiPuzzleDaily
func NewApiPuzzleDailyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/puzzle/daily")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiPuzzleDashboardRequest generates requests for ApiPuzzleDashboard
func NewApiPuzzleDashboardRequest(server string, days int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "days", runtime.ParamLocationPath, days)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/puzzle/dashboard/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFollowUserRequest generates requests for FollowUser
func NewFollowUserRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rel/follow/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserFollowingRequest generates requests for ApiUserFollowing
func NewApiUserFollowingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rel/following")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnfollowUserRequest generates requests for UnfollowUser
func NewUnfollowUserRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/rel/unfollow/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRoundAddTimeRequest generates requests for RoundAddTime
func NewRoundAddTimeRequest(server string, gameId string, seconds string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "seconds", runtime.ParamLocationPath, seconds)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/round/%s/add-time/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSimulRequest generates requests for ApiSimul
func NewApiSimulRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/simul")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiStormDashboardRequest generates requests for ApiStormDashboard
func NewApiStormDashboardRequest(server string, username string, params *ApiStormDashboardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/storm/dashboard/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Days != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "days", runtime.ParamLocationQuery, *params.Days); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBroadcastStreamRoundPgnRequest generates requests for BroadcastStreamRoundPgn
func NewBroadcastStreamRoundPgnRequest(server string, broadcastRoundId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "broadcastRoundId", runtime.ParamLocationPath, broadcastRoundId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/stream/broadcast/round/%s.pgn", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiStreamEventRequest generates requests for ApiStreamEvent
func NewApiStreamEventRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/stream/event")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStreamGameRequest generates requests for StreamGame
func NewStreamGameRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/stream/game/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGamesByUsersRequestWithBody generates requests for GamesByUsers with any type of body
func NewGamesByUsersRequestWithBody(server string, params *GamesByUsersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/stream/games-by-users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.WithCurrentGames != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withCurrentGames", runtime.ParamLocationQuery, *params.WithCurrentGames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStudyAllChaptersPgnRequest generates requests for StudyAllChaptersPgn
func NewStudyAllChaptersPgnRequest(server string, studyId string, params *StudyAllChaptersPgnParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "studyId", runtime.ParamLocationPath, studyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/study/%s.pgn", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Clocks != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clocks", runtime.ParamLocationQuery, *params.Clocks); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Comments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "comments", runtime.ParamLocationQuery, *params.Comments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Variations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "variations", runtime.ParamLocationQuery, *params.Variations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSwissNewRequestWithBody generates requests for ApiSwissNew with any type of body
func NewApiSwissNewRequestWithBody(server string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swiss/new/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiSwissUpdateRequestWithBody generates requests for ApiSwissUpdate with any type of body
func NewApiSwissUpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swiss/%s/edit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGamesBySwissRequest generates requests for GamesBySwiss
func NewGamesBySwissRequest(server string, id string, params *GamesBySwissParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swiss/%s/games", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Moves != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "moves", runtime.ParamLocationQuery, *params.Moves); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PgnInJson != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pgnInJson", runtime.ParamLocationQuery, *params.PgnInJson); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Clocks != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clocks", runtime.ParamLocationQuery, *params.Clocks); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Evals != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evals", runtime.ParamLocationQuery, *params.Evals); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Opening != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opening", runtime.ParamLocationQuery, *params.Opening); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSwissJoinRequestWithBody generates requests for ApiSwissJoin with any type of body
func NewApiSwissJoinRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swiss/%s/join", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResultsBySwissRequest generates requests for ResultsBySwiss
func NewResultsBySwissRequest(server string, id string, params *ResultsBySwissParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swiss/%s/results", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Nb != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nb", runtime.ParamLocationQuery, *params.Nb); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiSwissTerminateRequest generates requests for ApiSwissTerminate
func NewApiSwissTerminateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/swiss/%s/terminate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamAllRequest generates requests for TeamAll
func NewTeamAllRequest(server string, params *TeamAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/team/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamOfUsernameRequest generates requests for TeamOfUsername
func NewTeamOfUsernameRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/team/of/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamSearchRequest generates requests for TeamSearch
func NewTeamSearchRequest(server string, params *TeamSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/team/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Text != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "text", runtime.ParamLocationQuery, *params.Text); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamShowRequest generates requests for TeamShow
func NewTeamShowRequest(server string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/team/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiTeamSwissRequest generates requests for ApiTeamSwiss
func NewApiTeamSwissRequest(server string, teamId string, params *ApiTeamSwissParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/team/%s/swiss", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Max != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamIdUsersRequest generates requests for TeamIdUsers
func NewTeamIdUsersRequest(server string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/team/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiTokenDeleteRequest generates requests for ApiTokenDelete
func NewApiTokenDeleteRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiTokenRequestWithBody generates requests for ApiToken with any type of body
func NewApiTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminChallengeTokensRequestWithBody generates requests for AdminChallengeTokens with any type of body
func NewAdminChallengeTokensRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/token/admin-challenge")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTvChannelsRequest generates requests for TvChannels
func NewTvChannelsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tv/channels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTvFeedRequest generates requests for TvFeed
func NewTvFeedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tv/feed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTvChannelGamesRequest generates requests for TvChannelGames
func NewTvChannelGamesRequest(server string, channel string, params *TvChannelGamesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channel", runtime.ParamLocationPath, channel)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tv/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Nb != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nb", runtime.ParamLocationQuery, *params.Nb); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Moves != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "moves", runtime.ParamLocationQuery, *params.Moves); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PgnInJson != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pgnInJson", runtime.ParamLocationQuery, *params.PgnInJson); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Clocks != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clocks", runtime.ParamLocationQuery, *params.Clocks); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Opening != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opening", runtime.ParamLocationQuery, *params.Opening); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserRequest generates requests for ApiUser
func NewApiUserRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserActivityRequest generates requests for ApiUserActivity
func NewApiUserActivityRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user/%s/activity", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserCurrentGameRequest generates requests for ApiUserCurrentGame
func NewApiUserCurrentGameRequest(server string, username string, params *ApiUserCurrentGameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user/%s/current-game", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Moves != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "moves", runtime.ParamLocationQuery, *params.Moves); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PgnInJson != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pgnInJson", runtime.ParamLocationQuery, *params.PgnInJson); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Clocks != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clocks", runtime.ParamLocationQuery, *params.Clocks); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Evals != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evals", runtime.ParamLocationQuery, *params.Evals); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Opening != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opening", runtime.ParamLocationQuery, *params.Opening); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Literate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "literate", runtime.ParamLocationQuery, *params.Literate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Players != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "players", runtime.ParamLocationQuery, *params.Players); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserPerfRequest generates requests for ApiUserPerf
func NewApiUserPerfRequest(server string, username string, perf PerfType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "perf", runtime.ParamLocationPath, perf)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user/%s/perf/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserRatingHistoryRequest generates requests for ApiUserRatingHistory
func NewApiUserRatingHistoryRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user/%s/rating-history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUserNameTournamentCreatedRequest generates requests for ApiUserNameTournamentCreated
func NewApiUserNameTournamentCreatedRequest(server string, username string, params *ApiUserNameTournamentCreatedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user/%s/tournament/created", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApiUsersRequestWithBody generates requests for ApiUsers with any type of body
func NewApiUsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiUsersStatusRequest generates requests for ApiUsersStatus
func NewApiUsersStatusRequest(server string, params *ApiUsersStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTablebaseAtomicRequest generates requests for TablebaseAtomic
func NewTablebaseAtomicRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/atomic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBroadcastTourCreateRequestWithBody generates requests for BroadcastTourCreate with any type of body
func NewBroadcastTourCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/broadcast/new")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBroadcastRoundUpdateRequestWithBody generates requests for BroadcastRoundUpdate with any type of body
func NewBroadcastRoundUpdateRequestWithBody(server string, broadcastRoundId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "broadcastRoundId", runtime.ParamLocationPath, broadcastRoundId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/broadcast/round/%s/edit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBroadcastPushRequestWithBody generates requests for BroadcastPush with any type of body
func NewBroadcastPushRequestWithBody(server string, broadcastRoundId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "broadcastRoundId", runtime.ParamLocationPath, broadcastRoundId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/broadcast/round/%s/push", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBroadcastTourUpdateRequestWithBody generates requests for BroadcastTourUpdate with any type of body
func NewBroadcastTourUpdateRequestWithBody(server string, broadcastTournamentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "broadcastTournamentId", runtime.ParamLocationPath, broadcastTournamentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/broadcast/%s/edit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBroadcastRoundCreateRequestWithBody generates requests for BroadcastRoundCreate with any type of body
func NewBroadcastRoundCreateRequestWithBody(server string, broadcastTournamentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "broadcastTournamentId", runtime.ParamLocationPath, broadcastTournamentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/broadcast/%s/new", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBroadcastRoundGetRequest generates requests for BroadcastRoundGet
func NewBroadcastRoundGetRequest(server string, broadcastTournamentSlug string, broadcastRoundSlug string, broadcastRoundId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "broadcastTournamentSlug", runtime.ParamLocationPath, broadcastTournamentSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "broadcastRoundSlug", runtime.ParamLocationPath, broadcastRoundSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "broadcastRoundId", runtime.ParamLocationPath, broadcastRoundId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/broadcast/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBroadcastTourGetRequest generates requests for BroadcastTourGet
func NewBroadcastTourGetRequest(server string, slug string, broadcastTournamentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "broadcastTournamentId", runtime.ParamLocationPath, broadcastTournamentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/broadcast/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGamePgnRequest generates requests for GamePgn
func NewGamePgnRequest(server string, gameId string, params *GamePgnParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/game/export/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Moves != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "moves", runtime.ParamLocationQuery, *params.Moves); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PgnInJson != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pgnInJson", runtime.ParamLocationQuery, *params.PgnInJson); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Clocks != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clocks", runtime.ParamLocationQuery, *params.Clocks); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Evals != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evals", runtime.ParamLocationQuery, *params.Evals); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Opening != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opening", runtime.ParamLocationQuery, *params.Opening); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Literate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "literate", runtime.ParamLocationQuery, *params.Literate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Players != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "players", runtime.ParamLocationQuery, *params.Players); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGamesExportIdsRequestWithBody generates requests for GamesExportIds with any type of body
func NewGamesExportIdsRequestWithBody(server string, params *GamesExportIdsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/games/export/_ids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Moves != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "moves", runtime.ParamLocationQuery, *params.Moves); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PgnInJson != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pgnInJson", runtime.ParamLocationQuery, *params.PgnInJson); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tags != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Clocks != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clocks", runtime.ParamLocationQuery, *params.Clocks); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Evals != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evals", runtime.ParamLocationQuery, *params.Evals); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Opening != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "opening", runtime.ParamLocationQuery, *params.Opening); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Players != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "players", runtime.ParamLocationQuery, *params.Players); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInboxUsernameRequestWithBody generates requests for InboxUsername with any type of body
func NewInboxUsernameRequestWithBody(server string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inbox/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOpeningExplorerLichessRequest generates requests for OpeningExplorerLichess
func NewOpeningExplorerLichessRequest(server string, params *OpeningExplorerLichessParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lichess")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Variant != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "variant", runtime.ParamLocationQuery, *params.Variant); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fen != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fen", runtime.ParamLocationQuery, *params.Fen); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Play != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "play", runtime.ParamLocationQuery, *params.Play); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Speeds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "speeds", runtime.ParamLocationQuery, *params.Speeds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ratings != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ratings", runtime.ParamLocationQuery, *params.Ratings); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Until != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "until", runtime.ParamLocationQuery, *params.Until); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Moves != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "moves", runtime.ParamLocationQuery, *params.Moves); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TopGames != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "topGames", runtime.ParamLocationQuery, *params.TopGames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RecentGames != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recentGames", runtime.ParamLocationQuery, *params.RecentGames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOpeningExplorerMasterGameRequest generates requests for OpeningExplorerMasterGame
func NewOpeningExplorerMasterGameRequest(server string, gameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gameId", runtime.ParamLocationPath, gameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/master/pgn/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOpeningExplorerMasterRequest generates requests for OpeningExplorerMaster
func NewOpeningExplorerMasterRequest(server string, params *OpeningExplorerMasterParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/masters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Fen != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fen", runtime.ParamLocationQuery, *params.Fen); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Play != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "play", runtime.ParamLocationQuery, *params.Play); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Until != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "until", runtime.ParamLocationQuery, *params.Until); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Moves != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "moves", runtime.ParamLocationQuery, *params.Moves); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TopGames != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "topGames", runtime.ParamLocationQuery, *params.TopGames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOauthRequest generates requests for Oauth
func NewOauthRequest(server string, params *OauthParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "response_type", runtime.ParamLocationQuery, params.ResponseType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, params.ClientId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, params.RedirectUri); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code_challenge_method", runtime.ParamLocationQuery, params.CodeChallengeMethod); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code_challenge", runtime.ParamLocationQuery, params.CodeChallenge); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Scope != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlayerRequest generates requests for Player
func NewPlayerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/player")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlayerTopNbPerfTypeRequest generates requests for PlayerTopNbPerfType
func NewPlayerTopNbPerfTypeRequest(server string, nb int, perfType PlayerTopNbPerfTypeParamsPerfType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nb", runtime.ParamLocationPath, nb)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "perfType", runtime.ParamLocationPath, perfType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/player/top/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOpeningExplorerPlayerRequest generates requests for OpeningExplorerPlayer
func NewOpeningExplorerPlayerRequest(server string, params *OpeningExplorerPlayerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/player?")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Variant != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "variant", runtime.ParamLocationQuery, *params.Variant); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fen != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fen", runtime.ParamLocationQuery, *params.Fen); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Play != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "play", runtime.ParamLocationQuery, *params.Play); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Speeds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "speeds", runtime.ParamLocationQuery, *params.Speeds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Modes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modes", runtime.ParamLocationQuery, *params.Modes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Until != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "until", runtime.ParamLocationQuery, *params.Until); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Moves != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "moves", runtime.ParamLocationQuery, *params.Moves); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RecentGames != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recentGames", runtime.ParamLocationQuery, *params.RecentGames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTablebaseStandardRequest generates requests for TablebaseStandard
func NewTablebaseStandardRequest(server string, params *TablebaseStandardParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/standard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fen", runtime.ParamLocationQuery, params.Fen); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStreamerLiveRequest generates requests for StreamerLive
func NewStreamerLiveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/streamer/live")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStudyExportAllPgnRequest generates requests for StudyExportAllPgn
func NewStudyExportAllPgnRequest(server string, username string, params *StudyExportAllPgnParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/study/by/%s/export.pgn", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Clocks != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clocks", runtime.ParamLocationQuery, *params.Clocks); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Comments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "comments", runtime.ParamLocationQuery, *params.Comments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Variations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "variations", runtime.ParamLocationQuery, *params.Variations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStudyChapterPgnRequest generates requests for StudyChapterPgn
func NewStudyChapterPgnRequest(server string, studyId string, chapterId string, params *StudyChapterPgnParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "studyId", runtime.ParamLocationPath, studyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "chapterId", runtime.ParamLocationPath, chapterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/study/%s/%s.pgn", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Clocks != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clocks", runtime.ParamLocationQuery, *params.Clocks); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Comments != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "comments", runtime.ParamLocationQuery, *params.Comments); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Variations != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "variations", runtime.ParamLocationQuery, *params.Variations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSwissTrfRequest generates requests for SwissTrf
func NewSwissTrfRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swiss/%s.trf", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamIdJoinRequestWithBody generates requests for TeamIdJoin with any type of body
func NewTeamIdJoinRequestWithBody(server string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/%s/join", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTeamIdKickUserIdRequest generates requests for TeamIdKickUserId
func NewTeamIdKickUserIdRequest(server string, teamId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/%s/kick/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamIdPmAllRequestWithBody generates requests for TeamIdPmAll with any type of body
func NewTeamIdPmAllRequestWithBody(server string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/%s/pm-all", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTeamIdQuitRequest generates requests for TeamIdQuit
func NewTeamIdQuitRequest(server string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/%s/quit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AntichessAtomic request
	AntichessAtomicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AntichessAtomicResponse, error)

	// AccountMe request
	AccountMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountMeResponse, error)

	// AccountEmail request
	AccountEmailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountEmailResponse, error)

	// AccountKid request
	AccountKidWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountKidResponse, error)

	// AccountKidPost request
	AccountKidPostWithResponse(ctx context.Context, params *AccountKidPostParams, reqEditors ...RequestEditorFn) (*AccountKidPostResponse, error)

	// ApiAccountPlaying request
	ApiAccountPlayingWithResponse(ctx context.Context, params *ApiAccountPlayingParams, reqEditors ...RequestEditorFn) (*ApiAccountPlayingResponse, error)

	// Account request
	AccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountResponse, error)

	// BoardGameStream request
	BoardGameStreamWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*BoardGameStreamResponse, error)

	// BoardGameAbort request
	BoardGameAbortWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*BoardGameAbortResponse, error)

	// BoardGameChatGet request
	BoardGameChatGetWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*BoardGameChatGetResponse, error)

	// BoardGameChatPost request with any body
	BoardGameChatPostWithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BoardGameChatPostResponse, error)

	// BoardGameClaimVictory request
	BoardGameClaimVictoryWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*BoardGameClaimVictoryResponse, error)

	// BoardGameDraw request
	BoardGameDrawWithResponse(ctx context.Context, gameId string, accept bool, reqEditors ...RequestEditorFn) (*BoardGameDrawResponse, error)

	// BoardGameMove request
	BoardGameMoveWithResponse(ctx context.Context, gameId string, move string, params *BoardGameMoveParams, reqEditors ...RequestEditorFn) (*BoardGameMoveResponse, error)

	// BoardGameResign request
	BoardGameResignWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*BoardGameResignResponse, error)

	// BoardGameTakeback request
	BoardGameTakebackWithResponse(ctx context.Context, gameId string, accept bool, reqEditors ...RequestEditorFn) (*BoardGameTakebackResponse, error)

	// ApiBoardSeek request with any body
	ApiBoardSeekWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiBoardSeekResponse, error)

	// BotAccountUpgrade request
	BotAccountUpgradeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BotAccountUpgradeResponse, error)

	// BotGameStream request
	BotGameStreamWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*BotGameStreamResponse, error)

	// BotGameAbort request
	BotGameAbortWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*BotGameAbortResponse, error)

	// BotGameChat request with any body
	BotGameChatWithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BotGameChatResponse, error)

	// BotGameMove request
	BotGameMoveWithResponse(ctx context.Context, gameId string, move string, params *BotGameMoveParams, reqEditors ...RequestEditorFn) (*BotGameMoveResponse, error)

	// BotGameResign request
	BotGameResignWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*BotGameResignResponse, error)

	// ApiBotOnline request
	ApiBotOnlineWithResponse(ctx context.Context, params *ApiBotOnlineParams, reqEditors ...RequestEditorFn) (*ApiBotOnlineResponse, error)

	// BroadcastIndex request
	BroadcastIndexWithResponse(ctx context.Context, params *BroadcastIndexParams, reqEditors ...RequestEditorFn) (*BroadcastIndexResponse, error)

	// BroadcastRoundPgn request
	BroadcastRoundPgnWithResponse(ctx context.Context, broadcastRoundId string, reqEditors ...RequestEditorFn) (*BroadcastRoundPgnResponse, error)

	// BroadcastAllRoundsPgn request
	BroadcastAllRoundsPgnWithResponse(ctx context.Context, broadcastTournamentId string, reqEditors ...RequestEditorFn) (*BroadcastAllRoundsPgnResponse, error)

	// BulkPairingGet request
	BulkPairingGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BulkPairingGetResponse, error)

	// BulkPairingCreate request with any body
	BulkPairingCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkPairingCreateResponse, error)

	// BulkPairingDelete request
	BulkPairingDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BulkPairingDeleteResponse, error)

	// BulkPairingStartClocks request
	BulkPairingStartClocksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BulkPairingStartClocksResponse, error)

	// ChallengeList request
	ChallengeListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ChallengeListResponse, error)

	// ChallengeAi request with any body
	ChallengeAiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChallengeAiResponse, error)

	// ChallengeOpen request with any body
	ChallengeOpenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChallengeOpenResponse, error)

	// ChallengeAccept request
	ChallengeAcceptWithResponse(ctx context.Context, challengeId string, reqEditors ...RequestEditorFn) (*ChallengeAcceptResponse, error)

	// ChallengeCancel request
	ChallengeCancelWithResponse(ctx context.Context, challengeId string, params *ChallengeCancelParams, reqEditors ...RequestEditorFn) (*ChallengeCancelResponse, error)

	// ChallengeDecline request with any body
	ChallengeDeclineWithBodyWithResponse(ctx context.Context, challengeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChallengeDeclineResponse, error)

	// ChallengeStartClocks request
	ChallengeStartClocksWithResponse(ctx context.Context, gameId string, params *ChallengeStartClocksParams, reqEditors ...RequestEditorFn) (*ChallengeStartClocksResponse, error)

	// ChallengeCreate request with any body
	ChallengeCreateWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChallengeCreateResponse, error)

	// ApiCloudEval request
	ApiCloudEvalWithResponse(ctx context.Context, params *ApiCloudEvalParams, reqEditors ...RequestEditorFn) (*ApiCloudEvalResponse, error)

	// ApiCrosstable request
	ApiCrosstableWithResponse(ctx context.Context, user1 string, user2 string, params *ApiCrosstableParams, reqEditors ...RequestEditorFn) (*ApiCrosstableResponse, error)

	// ApiGamesUser request
	ApiGamesUserWithResponse(ctx context.Context, username string, params *ApiGamesUserParams, reqEditors ...RequestEditorFn) (*ApiGamesUserResponse, error)

	// GameImport request with any body
	GameImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GameImportResponse, error)

	// ApiPuzzleActivity request
	ApiPuzzleActivityWithResponse(ctx context.Context, params *ApiPuzzleActivityParams, reqEditors ...RequestEditorFn) (*ApiPuzzleActivityResponse, error)

	// ApiPuzzleDaily request
	ApiPuzzleDailyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiPuzzleDailyResponse, error)

	// ApiPuzzleDashboard request
	ApiPuzzleDashboardWithResponse(ctx context.Context, days int, reqEditors ...RequestEditorFn) (*ApiPuzzleDashboardResponse, error)

	// FollowUser request
	FollowUserWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*FollowUserResponse, error)

	// ApiUserFollowing request
	ApiUserFollowingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiUserFollowingResponse, error)

	// UnfollowUser request
	UnfollowUserWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*UnfollowUserResponse, error)

	// RoundAddTime request
	RoundAddTimeWithResponse(ctx context.Context, gameId string, seconds string, reqEditors ...RequestEditorFn) (*RoundAddTimeResponse, error)

	// ApiSimul request
	ApiSimulWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSimulResponse, error)

	// ApiStormDashboard request
	ApiStormDashboardWithResponse(ctx context.Context, username string, params *ApiStormDashboardParams, reqEditors ...RequestEditorFn) (*ApiStormDashboardResponse, error)

	// BroadcastStreamRoundPgn request
	BroadcastStreamRoundPgnWithResponse(ctx context.Context, broadcastRoundId string, reqEditors ...RequestEditorFn) (*BroadcastStreamRoundPgnResponse, error)

	// ApiStreamEvent request
	ApiStreamEventWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiStreamEventResponse, error)

	// StreamGame request
	StreamGameWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*StreamGameResponse, error)

	// GamesByUsers request with any body
	GamesByUsersWithBodyWithResponse(ctx context.Context, params *GamesByUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GamesByUsersResponse, error)

	// StudyAllChaptersPgn request
	StudyAllChaptersPgnWithResponse(ctx context.Context, studyId string, params *StudyAllChaptersPgnParams, reqEditors ...RequestEditorFn) (*StudyAllChaptersPgnResponse, error)

	// ApiSwissNew request with any body
	ApiSwissNewWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiSwissNewResponse, error)

	// ApiSwissUpdate request with any body
	ApiSwissUpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiSwissUpdateResponse, error)

	// GamesBySwiss request
	GamesBySwissWithResponse(ctx context.Context, id string, params *GamesBySwissParams, reqEditors ...RequestEditorFn) (*GamesBySwissResponse, error)

	// ApiSwissJoin request with any body
	ApiSwissJoinWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiSwissJoinResponse, error)

	// ResultsBySwiss request
	ResultsBySwissWithResponse(ctx context.Context, id string, params *ResultsBySwissParams, reqEditors ...RequestEditorFn) (*ResultsBySwissResponse, error)

	// ApiSwissTerminate request
	ApiSwissTerminateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ApiSwissTerminateResponse, error)

	// TeamAll request
	TeamAllWithResponse(ctx context.Context, params *TeamAllParams, reqEditors ...RequestEditorFn) (*TeamAllResponse, error)

	// TeamOfUsername request
	TeamOfUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*TeamOfUsernameResponse, error)

	// TeamSearch request
	TeamSearchWithResponse(ctx context.Context, params *TeamSearchParams, reqEditors ...RequestEditorFn) (*TeamSearchResponse, error)

	// TeamShow request
	TeamShowWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*TeamShowResponse, error)

	// ApiTeamArena request
	ApiTeamArenaWithResponse(ctx context.Context, teamId string, params *ApiTeamArenaParams, reqEditors ...RequestEditorFn) (*ApiTeamArenaResponse, error)

	// ApiTeamSwiss request
	ApiTeamSwissWithResponse(ctx context.Context, teamId string, params *ApiTeamSwissParams, reqEditors ...RequestEditorFn) (*ApiTeamSwissResponse, error)

	// TeamIdUsers request
	TeamIdUsersWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*TeamIdUsersResponse, error)

	// ApiTokenDelete request
	ApiTokenDeleteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiTokenDeleteResponse, error)

	// ApiToken request with any body
	ApiTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiTokenResponse, error)

	// AdminChallengeTokens request with any body
	AdminChallengeTokensWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminChallengeTokensResponse, error)

	// ApiTournament request
	ApiTournamentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiTournamentResponse, error)

	// ApiTournamentPost request with any body
	ApiTournamentPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiTournamentPostResponse, error)

	// ApiTournamentTeamBattlePost request with any body
	ApiTournamentTeamBattlePostWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiTournamentTeamBattlePostResponse, error)

	// Tournament request
	TournamentWithResponse(ctx context.Context, id string, params *TournamentParams, reqEditors ...RequestEditorFn) (*TournamentResponse, error)

	// ApiTournamentUpdate request with any body
	ApiTournamentUpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiTournamentUpdateResponse, error)

	// GamesByTournament request
	GamesByTournamentWithResponse(ctx context.Context, id string, params *GamesByTournamentParams, reqEditors ...RequestEditorFn) (*GamesByTournamentResponse, error)

	// ApiTournamentJoin request with any body
	ApiTournamentJoinWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiTournamentJoinResponse, error)

	// ResultsByTournament request
	ResultsByTournamentWithResponse(ctx context.Context, id string, params *ResultsByTournamentParams, reqEditors ...RequestEditorFn) (*ResultsByTournamentResponse, error)

	// TeamsByTournament request
	TeamsByTournamentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*TeamsByTournamentResponse, error)

	// ApiTournamentTerminate request
	ApiTournamentTerminateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ApiTournamentTerminateResponse, error)

	// ApiTournamentWithdraw request
	ApiTournamentWithdrawWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ApiTournamentWithdrawResponse, error)

	// TvChannels request
	TvChannelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TvChannelsResponse, error)

	// TvFeed request
	TvFeedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TvFeedResponse, error)

	// TvChannelGames request
	TvChannelGamesWithResponse(ctx context.Context, channel string, params *TvChannelGamesParams, reqEditors ...RequestEditorFn) (*TvChannelGamesResponse, error)

	// ApiUser request
	ApiUserWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*ApiUserResponse, error)

	// ApiUserActivity request
	ApiUserActivityWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*ApiUserActivityResponse, error)

	// ApiUserCurrentGame request
	ApiUserCurrentGameWithResponse(ctx context.Context, username string, params *ApiUserCurrentGameParams, reqEditors ...RequestEditorFn) (*ApiUserCurrentGameResponse, error)

	// ApiUserPerf request
	ApiUserPerfWithResponse(ctx context.Context, username string, perf PerfType, reqEditors ...RequestEditorFn) (*ApiUserPerfResponse, error)

	// ApiUserRatingHistory request
	ApiUserRatingHistoryWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*ApiUserRatingHistoryResponse, error)

	// ApiUserNameTournamentCreated request
	ApiUserNameTournamentCreatedWithResponse(ctx context.Context, username string, params *ApiUserNameTournamentCreatedParams, reqEditors ...RequestEditorFn) (*ApiUserNameTournamentCreatedResponse, error)

	// ApiUsers request with any body
	ApiUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiUsersResponse, error)

	// ApiUsersStatus request
	ApiUsersStatusWithResponse(ctx context.Context, params *ApiUsersStatusParams, reqEditors ...RequestEditorFn) (*ApiUsersStatusResponse, error)

	// TablebaseAtomic request
	TablebaseAtomicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TablebaseAtomicResponse, error)

	// BroadcastTourCreate request with any body
	BroadcastTourCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastTourCreateResponse, error)

	// BroadcastRoundUpdate request with any body
	BroadcastRoundUpdateWithBodyWithResponse(ctx context.Context, broadcastRoundId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastRoundUpdateResponse, error)

	// BroadcastPush request with any body
	BroadcastPushWithBodyWithResponse(ctx context.Context, broadcastRoundId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastPushResponse, error)

	// BroadcastTourUpdate request with any body
	BroadcastTourUpdateWithBodyWithResponse(ctx context.Context, broadcastTournamentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastTourUpdateResponse, error)

	// BroadcastRoundCreate request with any body
	BroadcastRoundCreateWithBodyWithResponse(ctx context.Context, broadcastTournamentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastRoundCreateResponse, error)

	// BroadcastRoundGet request
	BroadcastRoundGetWithResponse(ctx context.Context, broadcastTournamentSlug string, broadcastRoundSlug string, broadcastRoundId string, reqEditors ...RequestEditorFn) (*BroadcastRoundGetResponse, error)

	// BroadcastTourGet request
	BroadcastTourGetWithResponse(ctx context.Context, slug string, broadcastTournamentId string, reqEditors ...RequestEditorFn) (*BroadcastTourGetResponse, error)

	// GamePgn request
	GamePgnWithResponse(ctx context.Context, gameId string, params *GamePgnParams, reqEditors ...RequestEditorFn) (*GamePgnResponse, error)

	// GamesExportIds request with any body
	GamesExportIdsWithBodyWithResponse(ctx context.Context, params *GamesExportIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GamesExportIdsResponse, error)

	// InboxUsername request with any body
	InboxUsernameWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InboxUsernameResponse, error)

	// OpeningExplorerLichess request
	OpeningExplorerLichessWithResponse(ctx context.Context, params *OpeningExplorerLichessParams, reqEditors ...RequestEditorFn) (*OpeningExplorerLichessResponse, error)

	// OpeningExplorerMasterGame request
	OpeningExplorerMasterGameWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*OpeningExplorerMasterGameResponse, error)

	// OpeningExplorerMaster request
	OpeningExplorerMasterWithResponse(ctx context.Context, params *OpeningExplorerMasterParams, reqEditors ...RequestEditorFn) (*OpeningExplorerMasterResponse, error)

	// Oauth request
	OauthWithResponse(ctx context.Context, params *OauthParams, reqEditors ...RequestEditorFn) (*OauthResponse, error)

	// Player request
	PlayerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlayerResponse, error)

	// PlayerTopNbPerfType request
	PlayerTopNbPerfTypeWithResponse(ctx context.Context, nb int, perfType PlayerTopNbPerfTypeParamsPerfType, reqEditors ...RequestEditorFn) (*PlayerTopNbPerfTypeResponse, error)

	// OpeningExplorerPlayer request
	OpeningExplorerPlayerWithResponse(ctx context.Context, params *OpeningExplorerPlayerParams, reqEditors ...RequestEditorFn) (*OpeningExplorerPlayerResponse, error)

	// TablebaseStandard request
	TablebaseStandardWithResponse(ctx context.Context, params *TablebaseStandardParams, reqEditors ...RequestEditorFn) (*TablebaseStandardResponse, error)

	// StreamerLive request
	StreamerLiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StreamerLiveResponse, error)

	// StudyExportAllPgn request
	StudyExportAllPgnWithResponse(ctx context.Context, username string, params *StudyExportAllPgnParams, reqEditors ...RequestEditorFn) (*StudyExportAllPgnResponse, error)

	// StudyChapterPgn request
	StudyChapterPgnWithResponse(ctx context.Context, studyId string, chapterId string, params *StudyChapterPgnParams, reqEditors ...RequestEditorFn) (*StudyChapterPgnResponse, error)

	// SwissTrf request
	SwissTrfWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SwissTrfResponse, error)

	// TeamIdJoin request with any body
	TeamIdJoinWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamIdJoinResponse, error)

	// TeamIdKickUserId request
	TeamIdKickUserIdWithResponse(ctx context.Context, teamId string, userId string, reqEditors ...RequestEditorFn) (*TeamIdKickUserIdResponse, error)

	// TeamIdPmAll request with any body
	TeamIdPmAllWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamIdPmAllResponse, error)

	// TeamIdQuit request
	TeamIdQuitWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*TeamIdQuitResponse, error)
}

type AntichessAtomicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AntichessAtomicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AntichessAtomicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserExtended
}

// Status returns HTTPResponse.Status
func (r AccountMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Email *string `json:"email,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AccountEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountKidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Kid *bool `json:"kid,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AccountKidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountKidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountKidPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
}

// Status returns HTTPResponse.Status
func (r AccountKidPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountKidPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiAccountPlayingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r ApiAccountPlayingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiAccountPlayingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Language *string          `json:"language,omitempty"`
		Prefs    *UserPreferences `json:"prefs,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BoardGameStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r BoardGameStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BoardGameStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BoardGameAbortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BoardGameAbortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BoardGameAbortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BoardGameChatGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BoardGameChatGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BoardGameChatGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BoardGameChatPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BoardGameChatPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BoardGameChatPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BoardGameClaimVictoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BoardGameClaimVictoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BoardGameClaimVictoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BoardGameDrawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BoardGameDrawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BoardGameDrawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BoardGameMoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BoardGameMoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BoardGameMoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BoardGameResignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BoardGameResignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BoardGameResignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BoardGameTakebackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BoardGameTakebackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BoardGameTakebackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiBoardSeekResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r ApiBoardSeekResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiBoardSeekResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BotAccountUpgradeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BotAccountUpgradeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BotAccountUpgradeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BotGameStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r BotGameStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BotGameStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BotGameAbortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BotGameAbortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BotGameAbortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BotGameChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BotGameChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BotGameChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BotGameMoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BotGameMoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BotGameMoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BotGameResignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BotGameResignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BotGameResignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiBotOnlineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiBotOnlineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiBotOnlineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BroadcastIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BroadcastTour
}

// Status returns HTTPResponse.Status
func (r BroadcastIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BroadcastIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BroadcastRoundPgnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BroadcastRoundPgnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BroadcastRoundPgnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BroadcastAllRoundsPgnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BroadcastAllRoundsPgnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BroadcastAllRoundsPgnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkPairingGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BulkPairing
}

// Status returns HTTPResponse.Status
func (r BulkPairingGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkPairingGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkPairingCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BulkPairing
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BulkPairingCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkPairingCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkPairingDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r BulkPairingDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkPairingDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkPairingStartClocksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r BulkPairingStartClocksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkPairingStartClocksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChallengeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Incoming challenges i.e. targeted at you
		In *[]ChallengeJson `json:"in,omitempty"`

		// Outgoing challenges i.e. created by you
		Out *[]ChallengeJson `json:"out,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ChallengeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChallengeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChallengeAiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameJson
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r ChallengeAiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChallengeAiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChallengeOpenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChallengeOpenJson
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r ChallengeOpenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChallengeOpenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChallengeAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r ChallengeAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChallengeAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChallengeCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r ChallengeCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChallengeCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChallengeDeclineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r ChallengeDeclineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChallengeDeclineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChallengeStartClocksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
}

// Status returns HTTPResponse.Status
func (r ChallengeStartClocksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChallengeStartClocksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChallengeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChallengeJson
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r ChallengeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChallengeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiCloudEvalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiCloudEvalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiCloudEvalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiCrosstableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Crosstable
}

// Status returns HTTPResponse.Status
func (r ApiCrosstableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiCrosstableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiGamesUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiGamesUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiGamesUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GameImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r GameImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GameImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPuzzleActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiPuzzleActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPuzzleActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPuzzleDailyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiPuzzleDailyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPuzzleDailyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiPuzzleDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PuzzleDashboardJson
}

// Status returns HTTPResponse.Status
func (r ApiPuzzleDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiPuzzleDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FollowUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
}

// Status returns HTTPResponse.Status
func (r FollowUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FollowUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserFollowingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiUserFollowingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserFollowingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnfollowUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
}

// Status returns HTTPResponse.Status
func (r UnfollowUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnfollowUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RoundAddTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
}

// Status returns HTTPResponse.Status
func (r RoundAddTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RoundAddTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSimulResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Simul
}

// Status returns HTTPResponse.Status
func (r ApiSimulResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSimulResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiStormDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StormDashboardJson
}

// Status returns HTTPResponse.Status
func (r ApiStormDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiStormDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BroadcastStreamRoundPgnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BroadcastStreamRoundPgnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BroadcastStreamRoundPgnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiStreamEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiStreamEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiStreamEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StreamGameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StreamGameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StreamGameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GamesByUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GamesByUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GamesByUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StudyAllChaptersPgnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StudyAllChaptersPgnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StudyAllChaptersPgnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSwissNewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SwissTournament
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r ApiSwissNewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSwissNewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSwissUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SwissTournament
	JSON400      *Error
	JSON401      *SwissUnauthorisedEdit
}

// Status returns HTTPResponse.Status
func (r ApiSwissUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSwissUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GamesBySwissResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GamesBySwissResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GamesBySwissResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSwissJoinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r ApiSwissJoinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSwissJoinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResultsBySwissResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResultsBySwissResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResultsBySwissResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiSwissTerminateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r ApiSwissTerminateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiSwissTerminateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CurrentPage        *float32 `json:"currentPage,omitempty"`
		CurrentPageResults *[]Team  `json:"currentPageResults,omitempty"`
		MaxPerPage         *float32 `json:"maxPerPage,omitempty"`
		NbPages            *float32 `json:"nbPages,omitempty"`
		NbResults          *float32 `json:"nbResults,omitempty"`
		NextPage           *float32 `json:"nextPage,omitempty"`
		PreviousPage       *float32 `json:"previousPage,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r TeamAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamOfUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Team
}

// Status returns HTTPResponse.Status
func (r TeamOfUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamOfUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Team
}

// Status returns HTTPResponse.Status
func (r TeamSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
}

// Status returns HTTPResponse.Status
func (r TeamShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiTeamSwissResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SwissTournament
}

// Status returns HTTPResponse.Status
func (r ApiTeamSwissResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiTeamSwissResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TeamIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiTokenDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiTokenDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiTokenDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r ApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminChallengeTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r AdminChallengeTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminChallengeTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TvChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r TvChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TvChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TvFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TvFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TvFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TvChannelGamesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TvChannelGamesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TvChannelGamesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserExtended
}

// Status returns HTTPResponse.Status
func (r ApiUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiUserActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserCurrentGameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameJson
}

// Status returns HTTPResponse.Status
func (r ApiUserCurrentGameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserCurrentGameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserPerfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PerfStat
}

// Status returns HTTPResponse.Status
func (r ApiUserPerfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserPerfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserRatingHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RatingHistory
}

// Status returns HTTPResponse.Status
func (r ApiUserRatingHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserRatingHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUserNameTournamentCreatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApiUserNameTournamentCreatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUserNameTournamentCreatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r ApiUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiUsersStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id        *string `json:"id,omitempty"`
		Name      *string `json:"name,omitempty"`
		Online    *bool   `json:"online,omitempty"`
		Patron    *bool   `json:"patron,omitempty"`
		Playing   *bool   `json:"playing,omitempty"`
		Streaming *bool   `json:"streaming,omitempty"`
		Title     *string `json:"title,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiUsersStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiUsersStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TablebaseAtomicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TablebaseAtomicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TablebaseAtomicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BroadcastTourCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BroadcastTour
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BroadcastTourCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BroadcastTourCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BroadcastRoundUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BroadcastRoundUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BroadcastRoundUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BroadcastPushResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Ok
}

// Status returns HTTPResponse.Status
func (r BroadcastPushResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BroadcastPushResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BroadcastTourUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BroadcastTourUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BroadcastTourUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BroadcastRoundCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BroadcastRound
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r BroadcastRoundCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BroadcastRoundCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BroadcastRoundGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BroadcastRound
}

// Status returns HTTPResponse.Status
func (r BroadcastRoundGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BroadcastRoundGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BroadcastTourGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BroadcastTour
}

// Status returns HTTPResponse.Status
func (r BroadcastTourGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BroadcastTourGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GamePgnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameJson
}

// Status returns HTTPResponse.Status
func (r GamePgnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GamePgnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GamesExportIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GamesExportIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GamesExportIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InboxUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r InboxUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InboxUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpeningExplorerLichessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OpeningExplorerJson
}

// Status returns HTTPResponse.Status
func (r OpeningExplorerLichessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpeningExplorerLichessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpeningExplorerMasterGameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OpeningExplorerMasterGameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpeningExplorerMasterGameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpeningExplorerMasterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OpeningExplorerJson
}

// Status returns HTTPResponse.Status
func (r OpeningExplorerMasterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpeningExplorerMasterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OauthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OauthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OauthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlayerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlayerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlayerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlayerTopNbPerfTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlayerTopNbPerfTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlayerTopNbPerfTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OpeningExplorerPlayerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OpeningExplorerPlayerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OpeningExplorerPlayerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TablebaseStandardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TablebaseJson
}

// Status returns HTTPResponse.Status
func (r TablebaseStandardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TablebaseStandardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StreamerLiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id     *string `json:"id,omitempty"`
		Name   *string `json:"name,omitempty"`
		Online *bool   `json:"online,omitempty"`
		Patron *bool   `json:"patron,omitempty"`
		Title  *string `json:"title,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r StreamerLiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StreamerLiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StudyExportAllPgnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StudyExportAllPgnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StudyExportAllPgnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StudyChapterPgnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StudyChapterPgnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StudyChapterPgnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SwissTrfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SwissTrfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SwissTrfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamIdJoinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
}

// Status returns HTTPResponse.Status
func (r TeamIdJoinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamIdJoinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamIdKickUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
}

// Status returns HTTPResponse.Status
func (r TeamIdKickUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamIdKickUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamIdPmAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r TeamIdPmAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamIdPmAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamIdQuitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ok
}

// Status returns HTTPResponse.Status
func (r TeamIdQuitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamIdQuitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AntichessAtomicWithResponse request returning *AntichessAtomicResponse
func (c *ClientWithResponses) AntichessAtomicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AntichessAtomicResponse, error) {
	rsp, err := c.AntichessAtomic(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAntichessAtomicResponse(rsp)
}

// AccountMeWithResponse request returning *AccountMeResponse
func (c *ClientWithResponses) AccountMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountMeResponse, error) {
	rsp, err := c.AccountMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountMeResponse(rsp)
}

// AccountEmailWithResponse request returning *AccountEmailResponse
func (c *ClientWithResponses) AccountEmailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountEmailResponse, error) {
	rsp, err := c.AccountEmail(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountEmailResponse(rsp)
}

// AccountKidWithResponse request returning *AccountKidResponse
func (c *ClientWithResponses) AccountKidWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountKidResponse, error) {
	rsp, err := c.AccountKid(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountKidResponse(rsp)
}

// AccountKidPostWithResponse request returning *AccountKidPostResponse
func (c *ClientWithResponses) AccountKidPostWithResponse(ctx context.Context, params *AccountKidPostParams, reqEditors ...RequestEditorFn) (*AccountKidPostResponse, error) {
	rsp, err := c.AccountKidPost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountKidPostResponse(rsp)
}

// ApiAccountPlayingWithResponse request returning *ApiAccountPlayingResponse
func (c *ClientWithResponses) ApiAccountPlayingWithResponse(ctx context.Context, params *ApiAccountPlayingParams, reqEditors ...RequestEditorFn) (*ApiAccountPlayingResponse, error) {
	rsp, err := c.ApiAccountPlaying(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiAccountPlayingResponse(rsp)
}

// AccountWithResponse request returning *AccountResponse
func (c *ClientWithResponses) AccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountResponse, error) {
	rsp, err := c.Account(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountResponse(rsp)
}

// BoardGameStreamWithResponse request returning *BoardGameStreamResponse
func (c *ClientWithResponses) BoardGameStreamWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*BoardGameStreamResponse, error) {
	rsp, err := c.BoardGameStream(ctx, gameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBoardGameStreamResponse(rsp)
}

// BoardGameAbortWithResponse request returning *BoardGameAbortResponse
func (c *ClientWithResponses) BoardGameAbortWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*BoardGameAbortResponse, error) {
	rsp, err := c.BoardGameAbort(ctx, gameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBoardGameAbortResponse(rsp)
}

// BoardGameChatGetWithResponse request returning *BoardGameChatGetResponse
func (c *ClientWithResponses) BoardGameChatGetWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*BoardGameChatGetResponse, error) {
	rsp, err := c.BoardGameChatGet(ctx, gameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBoardGameChatGetResponse(rsp)
}

// BoardGameChatPostWithBodyWithResponse request with arbitrary body returning *BoardGameChatPostResponse
func (c *ClientWithResponses) BoardGameChatPostWithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BoardGameChatPostResponse, error) {
	rsp, err := c.BoardGameChatPostWithBody(ctx, gameId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBoardGameChatPostResponse(rsp)
}

// BoardGameClaimVictoryWithResponse request returning *BoardGameClaimVictoryResponse
func (c *ClientWithResponses) BoardGameClaimVictoryWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*BoardGameClaimVictoryResponse, error) {
	rsp, err := c.BoardGameClaimVictory(ctx, gameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBoardGameClaimVictoryResponse(rsp)
}

// BoardGameDrawWithResponse request returning *BoardGameDrawResponse
func (c *ClientWithResponses) BoardGameDrawWithResponse(ctx context.Context, gameId string, accept bool, reqEditors ...RequestEditorFn) (*BoardGameDrawResponse, error) {
	rsp, err := c.BoardGameDraw(ctx, gameId, accept, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBoardGameDrawResponse(rsp)
}

// BoardGameMoveWithResponse request returning *BoardGameMoveResponse
func (c *ClientWithResponses) BoardGameMoveWithResponse(ctx context.Context, gameId string, move string, params *BoardGameMoveParams, reqEditors ...RequestEditorFn) (*BoardGameMoveResponse, error) {
	rsp, err := c.BoardGameMove(ctx, gameId, move, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBoardGameMoveResponse(rsp)
}

// BoardGameResignWithResponse request returning *BoardGameResignResponse
func (c *ClientWithResponses) BoardGameResignWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*BoardGameResignResponse, error) {
	rsp, err := c.BoardGameResign(ctx, gameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBoardGameResignResponse(rsp)
}

// BoardGameTakebackWithResponse request returning *BoardGameTakebackResponse
func (c *ClientWithResponses) BoardGameTakebackWithResponse(ctx context.Context, gameId string, accept bool, reqEditors ...RequestEditorFn) (*BoardGameTakebackResponse, error) {
	rsp, err := c.BoardGameTakeback(ctx, gameId, accept, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBoardGameTakebackResponse(rsp)
}

// ApiBoardSeekWithBodyWithResponse request with arbitrary body returning *ApiBoardSeekResponse
func (c *ClientWithResponses) ApiBoardSeekWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiBoardSeekResponse, error) {
	rsp, err := c.ApiBoardSeekWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiBoardSeekResponse(rsp)
}

// BotAccountUpgradeWithResponse request returning *BotAccountUpgradeResponse
func (c *ClientWithResponses) BotAccountUpgradeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BotAccountUpgradeResponse, error) {
	rsp, err := c.BotAccountUpgrade(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBotAccountUpgradeResponse(rsp)
}

// BotGameStreamWithResponse request returning *BotGameStreamResponse
func (c *ClientWithResponses) BotGameStreamWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*BotGameStreamResponse, error) {
	rsp, err := c.BotGameStream(ctx, gameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBotGameStreamResponse(rsp)
}

// BotGameAbortWithResponse request returning *BotGameAbortResponse
func (c *ClientWithResponses) BotGameAbortWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*BotGameAbortResponse, error) {
	rsp, err := c.BotGameAbort(ctx, gameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBotGameAbortResponse(rsp)
}

// BotGameChatWithBodyWithResponse request with arbitrary body returning *BotGameChatResponse
func (c *ClientWithResponses) BotGameChatWithBodyWithResponse(ctx context.Context, gameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BotGameChatResponse, error) {
	rsp, err := c.BotGameChatWithBody(ctx, gameId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBotGameChatResponse(rsp)
}

// BotGameMoveWithResponse request returning *BotGameMoveResponse
func (c *ClientWithResponses) BotGameMoveWithResponse(ctx context.Context, gameId string, move string, params *BotGameMoveParams, reqEditors ...RequestEditorFn) (*BotGameMoveResponse, error) {
	rsp, err := c.BotGameMove(ctx, gameId, move, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBotGameMoveResponse(rsp)
}

// BotGameResignWithResponse request returning *BotGameResignResponse
func (c *ClientWithResponses) BotGameResignWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*BotGameResignResponse, error) {
	rsp, err := c.BotGameResign(ctx, gameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBotGameResignResponse(rsp)
}

// ApiBotOnlineWithResponse request returning *ApiBotOnlineResponse
func (c *ClientWithResponses) ApiBotOnlineWithResponse(ctx context.Context, params *ApiBotOnlineParams, reqEditors ...RequestEditorFn) (*ApiBotOnlineResponse, error) {
	rsp, err := c.ApiBotOnline(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiBotOnlineResponse(rsp)
}

// BroadcastIndexWithResponse request returning *BroadcastIndexResponse
func (c *ClientWithResponses) BroadcastIndexWithResponse(ctx context.Context, params *BroadcastIndexParams, reqEditors ...RequestEditorFn) (*BroadcastIndexResponse, error) {
	rsp, err := c.BroadcastIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastIndexResponse(rsp)
}

// BroadcastRoundPgnWithResponse request returning *BroadcastRoundPgnResponse
func (c *ClientWithResponses) BroadcastRoundPgnWithResponse(ctx context.Context, broadcastRoundId string, reqEditors ...RequestEditorFn) (*BroadcastRoundPgnResponse, error) {
	rsp, err := c.BroadcastRoundPgn(ctx, broadcastRoundId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastRoundPgnResponse(rsp)
}

// BroadcastAllRoundsPgnWithResponse request returning *BroadcastAllRoundsPgnResponse
func (c *ClientWithResponses) BroadcastAllRoundsPgnWithResponse(ctx context.Context, broadcastTournamentId string, reqEditors ...RequestEditorFn) (*BroadcastAllRoundsPgnResponse, error) {
	rsp, err := c.BroadcastAllRoundsPgn(ctx, broadcastTournamentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastAllRoundsPgnResponse(rsp)
}

// BulkPairingGetWithResponse request returning *BulkPairingGetResponse
func (c *ClientWithResponses) BulkPairingGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BulkPairingGetResponse, error) {
	rsp, err := c.BulkPairingGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkPairingGetResponse(rsp)
}

// BulkPairingCreateWithBodyWithResponse request with arbitrary body returning *BulkPairingCreateResponse
func (c *ClientWithResponses) BulkPairingCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkPairingCreateResponse, error) {
	rsp, err := c.BulkPairingCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkPairingCreateResponse(rsp)
}

// BulkPairingDeleteWithResponse request returning *BulkPairingDeleteResponse
func (c *ClientWithResponses) BulkPairingDeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BulkPairingDeleteResponse, error) {
	rsp, err := c.BulkPairingDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkPairingDeleteResponse(rsp)
}

// BulkPairingStartClocksWithResponse request returning *BulkPairingStartClocksResponse
func (c *ClientWithResponses) BulkPairingStartClocksWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BulkPairingStartClocksResponse, error) {
	rsp, err := c.BulkPairingStartClocks(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkPairingStartClocksResponse(rsp)
}

// ChallengeListWithResponse request returning *ChallengeListResponse
func (c *ClientWithResponses) ChallengeListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ChallengeListResponse, error) {
	rsp, err := c.ChallengeList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChallengeListResponse(rsp)
}

// ChallengeAiWithBodyWithResponse request with arbitrary body returning *ChallengeAiResponse
func (c *ClientWithResponses) ChallengeAiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChallengeAiResponse, error) {
	rsp, err := c.ChallengeAiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChallengeAiResponse(rsp)
}

// ChallengeOpenWithBodyWithResponse request with arbitrary body returning *ChallengeOpenResponse
func (c *ClientWithResponses) ChallengeOpenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChallengeOpenResponse, error) {
	rsp, err := c.ChallengeOpenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChallengeOpenResponse(rsp)
}

// ChallengeAcceptWithResponse request returning *ChallengeAcceptResponse
func (c *ClientWithResponses) ChallengeAcceptWithResponse(ctx context.Context, challengeId string, reqEditors ...RequestEditorFn) (*ChallengeAcceptResponse, error) {
	rsp, err := c.ChallengeAccept(ctx, challengeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChallengeAcceptResponse(rsp)
}

// ChallengeCancelWithResponse request returning *ChallengeCancelResponse
func (c *ClientWithResponses) ChallengeCancelWithResponse(ctx context.Context, challengeId string, params *ChallengeCancelParams, reqEditors ...RequestEditorFn) (*ChallengeCancelResponse, error) {
	rsp, err := c.ChallengeCancel(ctx, challengeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChallengeCancelResponse(rsp)
}

// ChallengeDeclineWithBodyWithResponse request with arbitrary body returning *ChallengeDeclineResponse
func (c *ClientWithResponses) ChallengeDeclineWithBodyWithResponse(ctx context.Context, challengeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChallengeDeclineResponse, error) {
	rsp, err := c.ChallengeDeclineWithBody(ctx, challengeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChallengeDeclineResponse(rsp)
}

// ChallengeStartClocksWithResponse request returning *ChallengeStartClocksResponse
func (c *ClientWithResponses) ChallengeStartClocksWithResponse(ctx context.Context, gameId string, params *ChallengeStartClocksParams, reqEditors ...RequestEditorFn) (*ChallengeStartClocksResponse, error) {
	rsp, err := c.ChallengeStartClocks(ctx, gameId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChallengeStartClocksResponse(rsp)
}

// ChallengeCreateWithBodyWithResponse request with arbitrary body returning *ChallengeCreateResponse
func (c *ClientWithResponses) ChallengeCreateWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChallengeCreateResponse, error) {
	rsp, err := c.ChallengeCreateWithBody(ctx, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChallengeCreateResponse(rsp)
}

// ApiCloudEvalWithResponse request returning *ApiCloudEvalResponse
func (c *ClientWithResponses) ApiCloudEvalWithResponse(ctx context.Context, params *ApiCloudEvalParams, reqEditors ...RequestEditorFn) (*ApiCloudEvalResponse, error) {
	rsp, err := c.ApiCloudEval(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiCloudEvalResponse(rsp)
}

// ApiCrosstableWithResponse request returning *ApiCrosstableResponse
func (c *ClientWithResponses) ApiCrosstableWithResponse(ctx context.Context, user1 string, user2 string, params *ApiCrosstableParams, reqEditors ...RequestEditorFn) (*ApiCrosstableResponse, error) {
	rsp, err := c.ApiCrosstable(ctx, user1, user2, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiCrosstableResponse(rsp)
}

// ApiGamesUserWithResponse request returning *ApiGamesUserResponse
func (c *ClientWithResponses) ApiGamesUserWithResponse(ctx context.Context, username string, params *ApiGamesUserParams, reqEditors ...RequestEditorFn) (*ApiGamesUserResponse, error) {
	rsp, err := c.ApiGamesUser(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiGamesUserResponse(rsp)
}

// GameImportWithBodyWithResponse request with arbitrary body returning *GameImportResponse
func (c *ClientWithResponses) GameImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GameImportResponse, error) {
	rsp, err := c.GameImportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGameImportResponse(rsp)
}

// ApiPuzzleActivityWithResponse request returning *ApiPuzzleActivityResponse
func (c *ClientWithResponses) ApiPuzzleActivityWithResponse(ctx context.Context, params *ApiPuzzleActivityParams, reqEditors ...RequestEditorFn) (*ApiPuzzleActivityResponse, error) {
	rsp, err := c.ApiPuzzleActivity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPuzzleActivityResponse(rsp)
}

// ApiPuzzleDailyWithResponse request returning *ApiPuzzleDailyResponse
func (c *ClientWithResponses) ApiPuzzleDailyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiPuzzleDailyResponse, error) {
	rsp, err := c.ApiPuzzleDaily(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPuzzleDailyResponse(rsp)
}

// ApiPuzzleDashboardWithResponse request returning *ApiPuzzleDashboardResponse
func (c *ClientWithResponses) ApiPuzzleDashboardWithResponse(ctx context.Context, days int, reqEditors ...RequestEditorFn) (*ApiPuzzleDashboardResponse, error) {
	rsp, err := c.ApiPuzzleDashboard(ctx, days, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiPuzzleDashboardResponse(rsp)
}

// FollowUserWithResponse request returning *FollowUserResponse
func (c *ClientWithResponses) FollowUserWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*FollowUserResponse, error) {
	rsp, err := c.FollowUser(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFollowUserResponse(rsp)
}

// ApiUserFollowingWithResponse request returning *ApiUserFollowingResponse
func (c *ClientWithResponses) ApiUserFollowingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiUserFollowingResponse, error) {
	rsp, err := c.ApiUserFollowing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserFollowingResponse(rsp)
}

// UnfollowUserWithResponse request returning *UnfollowUserResponse
func (c *ClientWithResponses) UnfollowUserWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*UnfollowUserResponse, error) {
	rsp, err := c.UnfollowUser(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnfollowUserResponse(rsp)
}

// RoundAddTimeWithResponse request returning *RoundAddTimeResponse
func (c *ClientWithResponses) RoundAddTimeWithResponse(ctx context.Context, gameId string, seconds string, reqEditors ...RequestEditorFn) (*RoundAddTimeResponse, error) {
	rsp, err := c.RoundAddTime(ctx, gameId, seconds, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoundAddTimeResponse(rsp)
}

// ApiSimulWithResponse request returning *ApiSimulResponse
func (c *ClientWithResponses) ApiSimulWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiSimulResponse, error) {
	rsp, err := c.ApiSimul(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSimulResponse(rsp)
}

// ApiStormDashboardWithResponse request returning *ApiStormDashboardResponse
func (c *ClientWithResponses) ApiStormDashboardWithResponse(ctx context.Context, username string, params *ApiStormDashboardParams, reqEditors ...RequestEditorFn) (*ApiStormDashboardResponse, error) {
	rsp, err := c.ApiStormDashboard(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiStormDashboardResponse(rsp)
}

// BroadcastStreamRoundPgnWithResponse request returning *BroadcastStreamRoundPgnResponse
func (c *ClientWithResponses) BroadcastStreamRoundPgnWithResponse(ctx context.Context, broadcastRoundId string, reqEditors ...RequestEditorFn) (*BroadcastStreamRoundPgnResponse, error) {
	rsp, err := c.BroadcastStreamRoundPgn(ctx, broadcastRoundId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastStreamRoundPgnResponse(rsp)
}

// ApiStreamEventWithResponse request returning *ApiStreamEventResponse
func (c *ClientWithResponses) ApiStreamEventWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiStreamEventResponse, error) {
	rsp, err := c.ApiStreamEvent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiStreamEventResponse(rsp)
}

// StreamGameWithResponse request returning *StreamGameResponse
func (c *ClientWithResponses) StreamGameWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*StreamGameResponse, error) {
	rsp, err := c.StreamGame(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStreamGameResponse(rsp)
}

// GamesByUsersWithBodyWithResponse request with arbitrary body returning *GamesByUsersResponse
func (c *ClientWithResponses) GamesByUsersWithBodyWithResponse(ctx context.Context, params *GamesByUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GamesByUsersResponse, error) {
	rsp, err := c.GamesByUsersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGamesByUsersResponse(rsp)
}

// StudyAllChaptersPgnWithResponse request returning *StudyAllChaptersPgnResponse
func (c *ClientWithResponses) StudyAllChaptersPgnWithResponse(ctx context.Context, studyId string, params *StudyAllChaptersPgnParams, reqEditors ...RequestEditorFn) (*StudyAllChaptersPgnResponse, error) {
	rsp, err := c.StudyAllChaptersPgn(ctx, studyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStudyAllChaptersPgnResponse(rsp)
}

// ApiSwissNewWithBodyWithResponse request with arbitrary body returning *ApiSwissNewResponse
func (c *ClientWithResponses) ApiSwissNewWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiSwissNewResponse, error) {
	rsp, err := c.ApiSwissNewWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSwissNewResponse(rsp)
}

// ApiSwissUpdateWithBodyWithResponse request with arbitrary body returning *ApiSwissUpdateResponse
func (c *ClientWithResponses) ApiSwissUpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiSwissUpdateResponse, error) {
	rsp, err := c.ApiSwissUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSwissUpdateResponse(rsp)
}

// GamesBySwissWithResponse request returning *GamesBySwissResponse
func (c *ClientWithResponses) GamesBySwissWithResponse(ctx context.Context, id string, params *GamesBySwissParams, reqEditors ...RequestEditorFn) (*GamesBySwissResponse, error) {
	rsp, err := c.GamesBySwiss(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGamesBySwissResponse(rsp)
}

// ApiSwissJoinWithBodyWithResponse request with arbitrary body returning *ApiSwissJoinResponse
func (c *ClientWithResponses) ApiSwissJoinWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiSwissJoinResponse, error) {
	rsp, err := c.ApiSwissJoinWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSwissJoinResponse(rsp)
}

// ResultsBySwissWithResponse request returning *ResultsBySwissResponse
func (c *ClientWithResponses) ResultsBySwissWithResponse(ctx context.Context, id string, params *ResultsBySwissParams, reqEditors ...RequestEditorFn) (*ResultsBySwissResponse, error) {
	rsp, err := c.ResultsBySwiss(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResultsBySwissResponse(rsp)
}

// ApiSwissTerminateWithResponse request returning *ApiSwissTerminateResponse
func (c *ClientWithResponses) ApiSwissTerminateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ApiSwissTerminateResponse, error) {
	rsp, err := c.ApiSwissTerminate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiSwissTerminateResponse(rsp)
}

// TeamAllWithResponse request returning *TeamAllResponse
func (c *ClientWithResponses) TeamAllWithResponse(ctx context.Context, params *TeamAllParams, reqEditors ...RequestEditorFn) (*TeamAllResponse, error) {
	rsp, err := c.TeamAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamAllResponse(rsp)
}

// TeamOfUsernameWithResponse request returning *TeamOfUsernameResponse
func (c *ClientWithResponses) TeamOfUsernameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*TeamOfUsernameResponse, error) {
	rsp, err := c.TeamOfUsername(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamOfUsernameResponse(rsp)
}

// TeamSearchWithResponse request returning *TeamSearchResponse
func (c *ClientWithResponses) TeamSearchWithResponse(ctx context.Context, params *TeamSearchParams, reqEditors ...RequestEditorFn) (*TeamSearchResponse, error) {
	rsp, err := c.TeamSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamSearchResponse(rsp)
}

// TeamShowWithResponse request returning *TeamShowResponse
func (c *ClientWithResponses) TeamShowWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*TeamShowResponse, error) {
	rsp, err := c.TeamShow(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamShowResponse(rsp)
}

// ApiTeamSwissWithResponse request returning *ApiTeamSwissResponse
func (c *ClientWithResponses) ApiTeamSwissWithResponse(ctx context.Context, teamId string, params *ApiTeamSwissParams, reqEditors ...RequestEditorFn) (*ApiTeamSwissResponse, error) {
	rsp, err := c.ApiTeamSwiss(ctx, teamId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiTeamSwissResponse(rsp)
}

// TeamIdUsersWithResponse request returning *TeamIdUsersResponse
func (c *ClientWithResponses) TeamIdUsersWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*TeamIdUsersResponse, error) {
	rsp, err := c.TeamIdUsers(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamIdUsersResponse(rsp)
}

// ApiTokenDeleteWithResponse request returning *ApiTokenDeleteResponse
func (c *ClientWithResponses) ApiTokenDeleteWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ApiTokenDeleteResponse, error) {
	rsp, err := c.ApiTokenDelete(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiTokenDeleteResponse(rsp)
}

// ApiTokenWithBodyWithResponse request with arbitrary body returning *ApiTokenResponse
func (c *ClientWithResponses) ApiTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiTokenResponse, error) {
	rsp, err := c.ApiTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiTokenResponse(rsp)
}

// AdminChallengeTokensWithBodyWithResponse request with arbitrary body returning *AdminChallengeTokensResponse
func (c *ClientWithResponses) AdminChallengeTokensWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminChallengeTokensResponse, error) {
	rsp, err := c.AdminChallengeTokensWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminChallengeTokensResponse(rsp)
}


// TvChannelsWithResponse request returning *TvChannelsResponse
func (c *ClientWithResponses) TvChannelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TvChannelsResponse, error) {
	rsp, err := c.TvChannels(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTvChannelsResponse(rsp)
}

// TvFeedWithResponse request returning *TvFeedResponse
func (c *ClientWithResponses) TvFeedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TvFeedResponse, error) {
	rsp, err := c.TvFeed(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTvFeedResponse(rsp)
}

// TvChannelGamesWithResponse request returning *TvChannelGamesResponse
func (c *ClientWithResponses) TvChannelGamesWithResponse(ctx context.Context, channel string, params *TvChannelGamesParams, reqEditors ...RequestEditorFn) (*TvChannelGamesResponse, error) {
	rsp, err := c.TvChannelGames(ctx, channel, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTvChannelGamesResponse(rsp)
}

// ApiUserWithResponse request returning *ApiUserResponse
func (c *ClientWithResponses) ApiUserWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*ApiUserResponse, error) {
	rsp, err := c.ApiUser(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserResponse(rsp)
}

// ApiUserActivityWithResponse request returning *ApiUserActivityResponse
func (c *ClientWithResponses) ApiUserActivityWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*ApiUserActivityResponse, error) {
	rsp, err := c.ApiUserActivity(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserActivityResponse(rsp)
}

// ApiUserCurrentGameWithResponse request returning *ApiUserCurrentGameResponse
func (c *ClientWithResponses) ApiUserCurrentGameWithResponse(ctx context.Context, username string, params *ApiUserCurrentGameParams, reqEditors ...RequestEditorFn) (*ApiUserCurrentGameResponse, error) {
	rsp, err := c.ApiUserCurrentGame(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserCurrentGameResponse(rsp)
}

// ApiUserPerfWithResponse request returning *ApiUserPerfResponse
func (c *ClientWithResponses) ApiUserPerfWithResponse(ctx context.Context, username string, perf PerfType, reqEditors ...RequestEditorFn) (*ApiUserPerfResponse, error) {
	rsp, err := c.ApiUserPerf(ctx, username, perf, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserPerfResponse(rsp)
}

// ApiUserRatingHistoryWithResponse request returning *ApiUserRatingHistoryResponse
func (c *ClientWithResponses) ApiUserRatingHistoryWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*ApiUserRatingHistoryResponse, error) {
	rsp, err := c.ApiUserRatingHistory(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserRatingHistoryResponse(rsp)
}

// ApiUserNameTournamentCreatedWithResponse request returning *ApiUserNameTournamentCreatedResponse
func (c *ClientWithResponses) ApiUserNameTournamentCreatedWithResponse(ctx context.Context, username string, params *ApiUserNameTournamentCreatedParams, reqEditors ...RequestEditorFn) (*ApiUserNameTournamentCreatedResponse, error) {
	rsp, err := c.ApiUserNameTournamentCreated(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUserNameTournamentCreatedResponse(rsp)
}

// ApiUsersWithBodyWithResponse request with arbitrary body returning *ApiUsersResponse
func (c *ClientWithResponses) ApiUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiUsersResponse, error) {
	rsp, err := c.ApiUsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUsersResponse(rsp)
}

// ApiUsersStatusWithResponse request returning *ApiUsersStatusResponse
func (c *ClientWithResponses) ApiUsersStatusWithResponse(ctx context.Context, params *ApiUsersStatusParams, reqEditors ...RequestEditorFn) (*ApiUsersStatusResponse, error) {
	rsp, err := c.ApiUsersStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiUsersStatusResponse(rsp)
}

// TablebaseAtomicWithResponse request returning *TablebaseAtomicResponse
func (c *ClientWithResponses) TablebaseAtomicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TablebaseAtomicResponse, error) {
	rsp, err := c.TablebaseAtomic(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTablebaseAtomicResponse(rsp)
}

// BroadcastTourCreateWithBodyWithResponse request with arbitrary body returning *BroadcastTourCreateResponse
func (c *ClientWithResponses) BroadcastTourCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastTourCreateResponse, error) {
	rsp, err := c.BroadcastTourCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastTourCreateResponse(rsp)
}

// BroadcastRoundUpdateWithBodyWithResponse request with arbitrary body returning *BroadcastRoundUpdateResponse
func (c *ClientWithResponses) BroadcastRoundUpdateWithBodyWithResponse(ctx context.Context, broadcastRoundId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastRoundUpdateResponse, error) {
	rsp, err := c.BroadcastRoundUpdateWithBody(ctx, broadcastRoundId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastRoundUpdateResponse(rsp)
}

// BroadcastPushWithBodyWithResponse request with arbitrary body returning *BroadcastPushResponse
func (c *ClientWithResponses) BroadcastPushWithBodyWithResponse(ctx context.Context, broadcastRoundId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastPushResponse, error) {
	rsp, err := c.BroadcastPushWithBody(ctx, broadcastRoundId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastPushResponse(rsp)
}

// BroadcastTourUpdateWithBodyWithResponse request with arbitrary body returning *BroadcastTourUpdateResponse
func (c *ClientWithResponses) BroadcastTourUpdateWithBodyWithResponse(ctx context.Context, broadcastTournamentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastTourUpdateResponse, error) {
	rsp, err := c.BroadcastTourUpdateWithBody(ctx, broadcastTournamentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastTourUpdateResponse(rsp)
}

// BroadcastRoundCreateWithBodyWithResponse request with arbitrary body returning *BroadcastRoundCreateResponse
func (c *ClientWithResponses) BroadcastRoundCreateWithBodyWithResponse(ctx context.Context, broadcastTournamentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastRoundCreateResponse, error) {
	rsp, err := c.BroadcastRoundCreateWithBody(ctx, broadcastTournamentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastRoundCreateResponse(rsp)
}

// BroadcastRoundGetWithResponse request returning *BroadcastRoundGetResponse
func (c *ClientWithResponses) BroadcastRoundGetWithResponse(ctx context.Context, broadcastTournamentSlug string, broadcastRoundSlug string, broadcastRoundId string, reqEditors ...RequestEditorFn) (*BroadcastRoundGetResponse, error) {
	rsp, err := c.BroadcastRoundGet(ctx, broadcastTournamentSlug, broadcastRoundSlug, broadcastRoundId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastRoundGetResponse(rsp)
}

// BroadcastTourGetWithResponse request returning *BroadcastTourGetResponse
func (c *ClientWithResponses) BroadcastTourGetWithResponse(ctx context.Context, slug string, broadcastTournamentId string, reqEditors ...RequestEditorFn) (*BroadcastTourGetResponse, error) {
	rsp, err := c.BroadcastTourGet(ctx, slug, broadcastTournamentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastTourGetResponse(rsp)
}

// GamePgnWithResponse request returning *GamePgnResponse
func (c *ClientWithResponses) GamePgnWithResponse(ctx context.Context, gameId string, params *GamePgnParams, reqEditors ...RequestEditorFn) (*GamePgnResponse, error) {
	rsp, err := c.GamePgn(ctx, gameId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGamePgnResponse(rsp)
}

// GamesExportIdsWithBodyWithResponse request with arbitrary body returning *GamesExportIdsResponse
func (c *ClientWithResponses) GamesExportIdsWithBodyWithResponse(ctx context.Context, params *GamesExportIdsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GamesExportIdsResponse, error) {
	rsp, err := c.GamesExportIdsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGamesExportIdsResponse(rsp)
}

// InboxUsernameWithBodyWithResponse request with arbitrary body returning *InboxUsernameResponse
func (c *ClientWithResponses) InboxUsernameWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InboxUsernameResponse, error) {
	rsp, err := c.InboxUsernameWithBody(ctx, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInboxUsernameResponse(rsp)
}

// OpeningExplorerLichessWithResponse request returning *OpeningExplorerLichessResponse
func (c *ClientWithResponses) OpeningExplorerLichessWithResponse(ctx context.Context, params *OpeningExplorerLichessParams, reqEditors ...RequestEditorFn) (*OpeningExplorerLichessResponse, error) {
	rsp, err := c.OpeningExplorerLichess(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpeningExplorerLichessResponse(rsp)
}

// OpeningExplorerMasterGameWithResponse request returning *OpeningExplorerMasterGameResponse
func (c *ClientWithResponses) OpeningExplorerMasterGameWithResponse(ctx context.Context, gameId string, reqEditors ...RequestEditorFn) (*OpeningExplorerMasterGameResponse, error) {
	rsp, err := c.OpeningExplorerMasterGame(ctx, gameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpeningExplorerMasterGameResponse(rsp)
}

// OpeningExplorerMasterWithResponse request returning *OpeningExplorerMasterResponse
func (c *ClientWithResponses) OpeningExplorerMasterWithResponse(ctx context.Context, params *OpeningExplorerMasterParams, reqEditors ...RequestEditorFn) (*OpeningExplorerMasterResponse, error) {
	rsp, err := c.OpeningExplorerMaster(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpeningExplorerMasterResponse(rsp)
}

// OauthWithResponse request returning *OauthResponse
func (c *ClientWithResponses) OauthWithResponse(ctx context.Context, params *OauthParams, reqEditors ...RequestEditorFn) (*OauthResponse, error) {
	rsp, err := c.Oauth(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOauthResponse(rsp)
}

// PlayerWithResponse request returning *PlayerResponse
func (c *ClientWithResponses) PlayerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlayerResponse, error) {
	rsp, err := c.Player(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlayerResponse(rsp)
}

// PlayerTopNbPerfTypeWithResponse request returning *PlayerTopNbPerfTypeResponse
func (c *ClientWithResponses) PlayerTopNbPerfTypeWithResponse(ctx context.Context, nb int, perfType PlayerTopNbPerfTypeParamsPerfType, reqEditors ...RequestEditorFn) (*PlayerTopNbPerfTypeResponse, error) {
	rsp, err := c.PlayerTopNbPerfType(ctx, nb, perfType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlayerTopNbPerfTypeResponse(rsp)
}

// OpeningExplorerPlayerWithResponse request returning *OpeningExplorerPlayerResponse
func (c *ClientWithResponses) OpeningExplorerPlayerWithResponse(ctx context.Context, params *OpeningExplorerPlayerParams, reqEditors ...RequestEditorFn) (*OpeningExplorerPlayerResponse, error) {
	rsp, err := c.OpeningExplorerPlayer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOpeningExplorerPlayerResponse(rsp)
}

// TablebaseStandardWithResponse request returning *TablebaseStandardResponse
func (c *ClientWithResponses) TablebaseStandardWithResponse(ctx context.Context, params *TablebaseStandardParams, reqEditors ...RequestEditorFn) (*TablebaseStandardResponse, error) {
	rsp, err := c.TablebaseStandard(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTablebaseStandardResponse(rsp)
}

// StreamerLiveWithResponse request returning *StreamerLiveResponse
func (c *ClientWithResponses) StreamerLiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StreamerLiveResponse, error) {
	rsp, err := c.StreamerLive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStreamerLiveResponse(rsp)
}

// StudyExportAllPgnWithResponse request returning *StudyExportAllPgnResponse
func (c *ClientWithResponses) StudyExportAllPgnWithResponse(ctx context.Context, username string, params *StudyExportAllPgnParams, reqEditors ...RequestEditorFn) (*StudyExportAllPgnResponse, error) {
	rsp, err := c.StudyExportAllPgn(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStudyExportAllPgnResponse(rsp)
}

// StudyChapterPgnWithResponse request returning *StudyChapterPgnResponse
func (c *ClientWithResponses) StudyChapterPgnWithResponse(ctx context.Context, studyId string, chapterId string, params *StudyChapterPgnParams, reqEditors ...RequestEditorFn) (*StudyChapterPgnResponse, error) {
	rsp, err := c.StudyChapterPgn(ctx, studyId, chapterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStudyChapterPgnResponse(rsp)
}

// SwissTrfWithResponse request returning *SwissTrfResponse
func (c *ClientWithResponses) SwissTrfWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SwissTrfResponse, error) {
	rsp, err := c.SwissTrf(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSwissTrfResponse(rsp)
}

// TeamIdJoinWithBodyWithResponse request with arbitrary body returning *TeamIdJoinResponse
func (c *ClientWithResponses) TeamIdJoinWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamIdJoinResponse, error) {
	rsp, err := c.TeamIdJoinWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamIdJoinResponse(rsp)
}

// TeamIdKickUserIdWithResponse request returning *TeamIdKickUserIdResponse
func (c *ClientWithResponses) TeamIdKickUserIdWithResponse(ctx context.Context, teamId string, userId string, reqEditors ...RequestEditorFn) (*TeamIdKickUserIdResponse, error) {
	rsp, err := c.TeamIdKickUserId(ctx, teamId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamIdKickUserIdResponse(rsp)
}

// TeamIdPmAllWithBodyWithResponse request with arbitrary body returning *TeamIdPmAllResponse
func (c *ClientWithResponses) TeamIdPmAllWithBodyWithResponse(ctx context.Context, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamIdPmAllResponse, error) {
	rsp, err := c.TeamIdPmAllWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamIdPmAllResponse(rsp)
}

// TeamIdQuitWithResponse request returning *TeamIdQuitResponse
func (c *ClientWithResponses) TeamIdQuitWithResponse(ctx context.Context, teamId string, reqEditors ...RequestEditorFn) (*TeamIdQuitResponse, error) {
	rsp, err := c.TeamIdQuit(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamIdQuitResponse(rsp)
}

// ParseAntichessAtomicResponse parses an HTTP response from a AntichessAtomicWithResponse call
func ParseAntichessAtomicResponse(rsp *http.Response) (*AntichessAtomicResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AntichessAtomicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccountMeResponse parses an HTTP response from a AccountMeWithResponse call
func ParseAccountMeResponse(rsp *http.Response) (*AccountMeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserExtended
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountEmailResponse parses an HTTP response from a AccountEmailWithResponse call
func ParseAccountEmailResponse(rsp *http.Response) (*AccountEmailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Email *string `json:"email,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountKidResponse parses an HTTP response from a AccountKidWithResponse call
func ParseAccountKidResponse(rsp *http.Response) (*AccountKidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountKidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Kid *bool `json:"kid,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountKidPostResponse parses an HTTP response from a AccountKidPostWithResponse call
func ParseAccountKidPostResponse(rsp *http.Response) (*AccountKidPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountKidPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiAccountPlayingResponse parses an HTTP response from a ApiAccountPlayingWithResponse call
func ParseApiAccountPlayingResponse(rsp *http.Response) (*ApiAccountPlayingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiAccountPlayingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountResponse parses an HTTP response from a AccountWithResponse call
func ParseAccountResponse(rsp *http.Response) (*AccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Language *string          `json:"language,omitempty"`
			Prefs    *UserPreferences `json:"prefs,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBoardGameStreamResponse parses an HTTP response from a BoardGameStreamWithResponse call
func ParseBoardGameStreamResponse(rsp *http.Response) (*BoardGameStreamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BoardGameStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBoardGameAbortResponse parses an HTTP response from a BoardGameAbortWithResponse call
func ParseBoardGameAbortResponse(rsp *http.Response) (*BoardGameAbortResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BoardGameAbortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBoardGameChatGetResponse parses an HTTP response from a BoardGameChatGetWithResponse call
func ParseBoardGameChatGetResponse(rsp *http.Response) (*BoardGameChatGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BoardGameChatGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBoardGameChatPostResponse parses an HTTP response from a BoardGameChatPostWithResponse call
func ParseBoardGameChatPostResponse(rsp *http.Response) (*BoardGameChatPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BoardGameChatPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBoardGameClaimVictoryResponse parses an HTTP response from a BoardGameClaimVictoryWithResponse call
func ParseBoardGameClaimVictoryResponse(rsp *http.Response) (*BoardGameClaimVictoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BoardGameClaimVictoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBoardGameDrawResponse parses an HTTP response from a BoardGameDrawWithResponse call
func ParseBoardGameDrawResponse(rsp *http.Response) (*BoardGameDrawResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BoardGameDrawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBoardGameMoveResponse parses an HTTP response from a BoardGameMoveWithResponse call
func ParseBoardGameMoveResponse(rsp *http.Response) (*BoardGameMoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BoardGameMoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBoardGameResignResponse parses an HTTP response from a BoardGameResignWithResponse call
func ParseBoardGameResignResponse(rsp *http.Response) (*BoardGameResignResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BoardGameResignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBoardGameTakebackResponse parses an HTTP response from a BoardGameTakebackWithResponse call
func ParseBoardGameTakebackResponse(rsp *http.Response) (*BoardGameTakebackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BoardGameTakebackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseApiBoardSeekResponse parses an HTTP response from a ApiBoardSeekWithResponse call
func ParseApiBoardSeekResponse(rsp *http.Response) (*ApiBoardSeekResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiBoardSeekResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBotAccountUpgradeResponse parses an HTTP response from a BotAccountUpgradeWithResponse call
func ParseBotAccountUpgradeResponse(rsp *http.Response) (*BotAccountUpgradeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BotAccountUpgradeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBotGameStreamResponse parses an HTTP response from a BotGameStreamWithResponse call
func ParseBotGameStreamResponse(rsp *http.Response) (*BotGameStreamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BotGameStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBotGameAbortResponse parses an HTTP response from a BotGameAbortWithResponse call
func ParseBotGameAbortResponse(rsp *http.Response) (*BotGameAbortResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BotGameAbortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBotGameChatResponse parses an HTTP response from a BotGameChatWithResponse call
func ParseBotGameChatResponse(rsp *http.Response) (*BotGameChatResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BotGameChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBotGameMoveResponse parses an HTTP response from a BotGameMoveWithResponse call
func ParseBotGameMoveResponse(rsp *http.Response) (*BotGameMoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BotGameMoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBotGameResignResponse parses an HTTP response from a BotGameResignWithResponse call
func ParseBotGameResignResponse(rsp *http.Response) (*BotGameResignResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BotGameResignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseApiBotOnlineResponse parses an HTTP response from a ApiBotOnlineWithResponse call
func ParseApiBotOnlineResponse(rsp *http.Response) (*ApiBotOnlineResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiBotOnlineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBroadcastIndexResponse parses an HTTP response from a BroadcastIndexWithResponse call
func ParseBroadcastIndexResponse(rsp *http.Response) (*BroadcastIndexResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BroadcastIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BroadcastTour
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBroadcastRoundPgnResponse parses an HTTP response from a BroadcastRoundPgnWithResponse call
func ParseBroadcastRoundPgnResponse(rsp *http.Response) (*BroadcastRoundPgnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BroadcastRoundPgnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBroadcastAllRoundsPgnResponse parses an HTTP response from a BroadcastAllRoundsPgnWithResponse call
func ParseBroadcastAllRoundsPgnResponse(rsp *http.Response) (*BroadcastAllRoundsPgnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BroadcastAllRoundsPgnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBulkPairingGetResponse parses an HTTP response from a BulkPairingGetWithResponse call
func ParseBulkPairingGetResponse(rsp *http.Response) (*BulkPairingGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkPairingGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BulkPairing
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBulkPairingCreateResponse parses an HTTP response from a BulkPairingCreateWithResponse call
func ParseBulkPairingCreateResponse(rsp *http.Response) (*BulkPairingCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkPairingCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BulkPairing
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBulkPairingDeleteResponse parses an HTTP response from a BulkPairingDeleteWithResponse call
func ParseBulkPairingDeleteResponse(rsp *http.Response) (*BulkPairingDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkPairingDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseBulkPairingStartClocksResponse parses an HTTP response from a BulkPairingStartClocksWithResponse call
func ParseBulkPairingStartClocksResponse(rsp *http.Response) (*BulkPairingStartClocksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkPairingStartClocksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseChallengeListResponse parses an HTTP response from a ChallengeListWithResponse call
func ParseChallengeListResponse(rsp *http.Response) (*ChallengeListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChallengeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Incoming challenges i.e. targeted at you
			In *[]ChallengeJson `json:"in,omitempty"`

			// Outgoing challenges i.e. created by you
			Out *[]ChallengeJson `json:"out,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChallengeAiResponse parses an HTTP response from a ChallengeAiWithResponse call
func ParseChallengeAiResponse(rsp *http.Response) (*ChallengeAiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChallengeAiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseChallengeOpenResponse parses an HTTP response from a ChallengeOpenWithResponse call
func ParseChallengeOpenResponse(rsp *http.Response) (*ChallengeOpenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChallengeOpenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChallengeOpenJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseChallengeAcceptResponse parses an HTTP response from a ChallengeAcceptWithResponse call
func ParseChallengeAcceptResponse(rsp *http.Response) (*ChallengeAcceptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChallengeAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseChallengeCancelResponse parses an HTTP response from a ChallengeCancelWithResponse call
func ParseChallengeCancelResponse(rsp *http.Response) (*ChallengeCancelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChallengeCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseChallengeDeclineResponse parses an HTTP response from a ChallengeDeclineWithResponse call
func ParseChallengeDeclineResponse(rsp *http.Response) (*ChallengeDeclineResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChallengeDeclineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseChallengeStartClocksResponse parses an HTTP response from a ChallengeStartClocksWithResponse call
func ParseChallengeStartClocksResponse(rsp *http.Response) (*ChallengeStartClocksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChallengeStartClocksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChallengeCreateResponse parses an HTTP response from a ChallengeCreateWithResponse call
func ParseChallengeCreateResponse(rsp *http.Response) (*ChallengeCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChallengeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChallengeJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseApiCloudEvalResponse parses an HTTP response from a ApiCloudEvalWithResponse call
func ParseApiCloudEvalResponse(rsp *http.Response) (*ApiCloudEvalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiCloudEvalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiCrosstableResponse parses an HTTP response from a ApiCrosstableWithResponse call
func ParseApiCrosstableResponse(rsp *http.Response) (*ApiCrosstableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiCrosstableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Crosstable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiGamesUserResponse parses an HTTP response from a ApiGamesUserWithResponse call
func ParseApiGamesUserResponse(rsp *http.Response) (*ApiGamesUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiGamesUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGameImportResponse parses an HTTP response from a GameImportWithResponse call
func ParseGameImportResponse(rsp *http.Response) (*GameImportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GameImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiPuzzleActivityResponse parses an HTTP response from a ApiPuzzleActivityWithResponse call
func ParseApiPuzzleActivityResponse(rsp *http.Response) (*ApiPuzzleActivityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPuzzleActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiPuzzleDailyResponse parses an HTTP response from a ApiPuzzleDailyWithResponse call
func ParseApiPuzzleDailyResponse(rsp *http.Response) (*ApiPuzzleDailyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPuzzleDailyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiPuzzleDashboardResponse parses an HTTP response from a ApiPuzzleDashboardWithResponse call
func ParseApiPuzzleDashboardResponse(rsp *http.Response) (*ApiPuzzleDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiPuzzleDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PuzzleDashboardJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFollowUserResponse parses an HTTP response from a FollowUserWithResponse call
func ParseFollowUserResponse(rsp *http.Response) (*FollowUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FollowUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiUserFollowingResponse parses an HTTP response from a ApiUserFollowingWithResponse call
func ParseApiUserFollowingResponse(rsp *http.Response) (*ApiUserFollowingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserFollowingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnfollowUserResponse parses an HTTP response from a UnfollowUserWithResponse call
func ParseUnfollowUserResponse(rsp *http.Response) (*UnfollowUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnfollowUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRoundAddTimeResponse parses an HTTP response from a RoundAddTimeWithResponse call
func ParseRoundAddTimeResponse(rsp *http.Response) (*RoundAddTimeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RoundAddTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiSimulResponse parses an HTTP response from a ApiSimulWithResponse call
func ParseApiSimulResponse(rsp *http.Response) (*ApiSimulResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSimulResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Simul
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiStormDashboardResponse parses an HTTP response from a ApiStormDashboardWithResponse call
func ParseApiStormDashboardResponse(rsp *http.Response) (*ApiStormDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiStormDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StormDashboardJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBroadcastStreamRoundPgnResponse parses an HTTP response from a BroadcastStreamRoundPgnWithResponse call
func ParseBroadcastStreamRoundPgnResponse(rsp *http.Response) (*BroadcastStreamRoundPgnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BroadcastStreamRoundPgnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiStreamEventResponse parses an HTTP response from a ApiStreamEventWithResponse call
func ParseApiStreamEventResponse(rsp *http.Response) (*ApiStreamEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiStreamEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStreamGameResponse parses an HTTP response from a StreamGameWithResponse call
func ParseStreamGameResponse(rsp *http.Response) (*StreamGameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StreamGameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGamesByUsersResponse parses an HTTP response from a GamesByUsersWithResponse call
func ParseGamesByUsersResponse(rsp *http.Response) (*GamesByUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GamesByUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStudyAllChaptersPgnResponse parses an HTTP response from a StudyAllChaptersPgnWithResponse call
func ParseStudyAllChaptersPgnResponse(rsp *http.Response) (*StudyAllChaptersPgnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StudyAllChaptersPgnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiSwissNewResponse parses an HTTP response from a ApiSwissNewWithResponse call
func ParseApiSwissNewResponse(rsp *http.Response) (*ApiSwissNewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSwissNewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SwissTournament
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseApiSwissUpdateResponse parses an HTTP response from a ApiSwissUpdateWithResponse call
func ParseApiSwissUpdateResponse(rsp *http.Response) (*ApiSwissUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSwissUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SwissTournament
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SwissUnauthorisedEdit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGamesBySwissResponse parses an HTTP response from a GamesBySwissWithResponse call
func ParseGamesBySwissResponse(rsp *http.Response) (*GamesBySwissResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GamesBySwissResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiSwissJoinResponse parses an HTTP response from a ApiSwissJoinWithResponse call
func ParseApiSwissJoinResponse(rsp *http.Response) (*ApiSwissJoinResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSwissJoinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseResultsBySwissResponse parses an HTTP response from a ResultsBySwissWithResponse call
func ParseResultsBySwissResponse(rsp *http.Response) (*ResultsBySwissResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResultsBySwissResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiSwissTerminateResponse parses an HTTP response from a ApiSwissTerminateWithResponse call
func ParseApiSwissTerminateResponse(rsp *http.Response) (*ApiSwissTerminateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiSwissTerminateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseTeamAllResponse parses an HTTP response from a TeamAllWithResponse call
func ParseTeamAllResponse(rsp *http.Response) (*TeamAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CurrentPage        *float32 `json:"currentPage,omitempty"`
			CurrentPageResults *[]Team  `json:"currentPageResults,omitempty"`
			MaxPerPage         *float32 `json:"maxPerPage,omitempty"`
			NbPages            *float32 `json:"nbPages,omitempty"`
			NbResults          *float32 `json:"nbResults,omitempty"`
			NextPage           *float32 `json:"nextPage,omitempty"`
			PreviousPage       *float32 `json:"previousPage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTeamOfUsernameResponse parses an HTTP response from a TeamOfUsernameWithResponse call
func ParseTeamOfUsernameResponse(rsp *http.Response) (*TeamOfUsernameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamOfUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTeamSearchResponse parses an HTTP response from a TeamSearchWithResponse call
func ParseTeamSearchResponse(rsp *http.Response) (*TeamSearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTeamShowResponse parses an HTTP response from a TeamShowWithResponse call
func ParseTeamShowResponse(rsp *http.Response) (*TeamShowResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiTeamSwissResponse parses an HTTP response from a ApiTeamSwissWithResponse call
func ParseApiTeamSwissResponse(rsp *http.Response) (*ApiTeamSwissResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiTeamSwissResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SwissTournament
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTeamIdUsersResponse parses an HTTP response from a TeamIdUsersWithResponse call
func ParseTeamIdUsersResponse(rsp *http.Response) (*TeamIdUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiTokenDeleteResponse parses an HTTP response from a ApiTokenDeleteWithResponse call
func ParseApiTokenDeleteResponse(rsp *http.Response) (*ApiTokenDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiTokenDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiTokenResponse parses an HTTP response from a ApiTokenWithResponse call
func ParseApiTokenResponse(rsp *http.Response) (*ApiTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAdminChallengeTokensResponse parses an HTTP response from a AdminChallengeTokensWithResponse call
func ParseAdminChallengeTokensResponse(rsp *http.Response) (*AdminChallengeTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminChallengeTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}



// ParseTvChannelsResponse parses an HTTP response from a TvChannelsWithResponse call
func ParseTvChannelsResponse(rsp *http.Response) (*TvChannelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TvChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTvFeedResponse parses an HTTP response from a TvFeedWithResponse call
func ParseTvFeedResponse(rsp *http.Response) (*TvFeedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TvFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTvChannelGamesResponse parses an HTTP response from a TvChannelGamesWithResponse call
func ParseTvChannelGamesResponse(rsp *http.Response) (*TvChannelGamesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TvChannelGamesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiUserResponse parses an HTTP response from a ApiUserWithResponse call
func ParseApiUserResponse(rsp *http.Response) (*ApiUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserExtended
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiUserActivityResponse parses an HTTP response from a ApiUserActivityWithResponse call
func ParseApiUserActivityResponse(rsp *http.Response) (*ApiUserActivityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiUserCurrentGameResponse parses an HTTP response from a ApiUserCurrentGameWithResponse call
func ParseApiUserCurrentGameResponse(rsp *http.Response) (*ApiUserCurrentGameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserCurrentGameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/x-chess-pgn) unsupported

	}

	return response, nil
}

// ParseApiUserPerfResponse parses an HTTP response from a ApiUserPerfWithResponse call
func ParseApiUserPerfResponse(rsp *http.Response) (*ApiUserPerfResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserPerfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PerfStat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiUserRatingHistoryResponse parses an HTTP response from a ApiUserRatingHistoryWithResponse call
func ParseApiUserRatingHistoryResponse(rsp *http.Response) (*ApiUserRatingHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserRatingHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RatingHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiUserNameTournamentCreatedResponse parses an HTTP response from a ApiUserNameTournamentCreatedWithResponse call
func ParseApiUserNameTournamentCreatedResponse(rsp *http.Response) (*ApiUserNameTournamentCreatedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUserNameTournamentCreatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApiUsersResponse parses an HTTP response from a ApiUsersWithResponse call
func ParseApiUsersResponse(rsp *http.Response) (*ApiUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApiUsersStatusResponse parses an HTTP response from a ApiUsersStatusWithResponse call
func ParseApiUsersStatusResponse(rsp *http.Response) (*ApiUsersStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiUsersStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id        *string `json:"id,omitempty"`
			Name      *string `json:"name,omitempty"`
			Online    *bool   `json:"online,omitempty"`
			Patron    *bool   `json:"patron,omitempty"`
			Playing   *bool   `json:"playing,omitempty"`
			Streaming *bool   `json:"streaming,omitempty"`
			Title     *string `json:"title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTablebaseAtomicResponse parses an HTTP response from a TablebaseAtomicWithResponse call
func ParseTablebaseAtomicResponse(rsp *http.Response) (*TablebaseAtomicResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TablebaseAtomicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBroadcastTourCreateResponse parses an HTTP response from a BroadcastTourCreateWithResponse call
func ParseBroadcastTourCreateResponse(rsp *http.Response) (*BroadcastTourCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BroadcastTourCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BroadcastTour
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBroadcastRoundUpdateResponse parses an HTTP response from a BroadcastRoundUpdateWithResponse call
func ParseBroadcastRoundUpdateResponse(rsp *http.Response) (*BroadcastRoundUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BroadcastRoundUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBroadcastPushResponse parses an HTTP response from a BroadcastPushWithResponse call
func ParseBroadcastPushResponse(rsp *http.Response) (*BroadcastPushResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BroadcastPushResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBroadcastTourUpdateResponse parses an HTTP response from a BroadcastTourUpdateWithResponse call
func ParseBroadcastTourUpdateResponse(rsp *http.Response) (*BroadcastTourUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BroadcastTourUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBroadcastRoundCreateResponse parses an HTTP response from a BroadcastRoundCreateWithResponse call
func ParseBroadcastRoundCreateResponse(rsp *http.Response) (*BroadcastRoundCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BroadcastRoundCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BroadcastRound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseBroadcastRoundGetResponse parses an HTTP response from a BroadcastRoundGetWithResponse call
func ParseBroadcastRoundGetResponse(rsp *http.Response) (*BroadcastRoundGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BroadcastRoundGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BroadcastRound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBroadcastTourGetResponse parses an HTTP response from a BroadcastTourGetWithResponse call
func ParseBroadcastTourGetResponse(rsp *http.Response) (*BroadcastTourGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BroadcastTourGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BroadcastTour
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGamePgnResponse parses an HTTP response from a GamePgnWithResponse call
func ParseGamePgnResponse(rsp *http.Response) (*GamePgnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GamePgnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/x-chess-pgn) unsupported

	}

	return response, nil
}

// ParseGamesExportIdsResponse parses an HTTP response from a GamesExportIdsWithResponse call
func ParseGamesExportIdsResponse(rsp *http.Response) (*GamesExportIdsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GamesExportIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInboxUsernameResponse parses an HTTP response from a InboxUsernameWithResponse call
func ParseInboxUsernameResponse(rsp *http.Response) (*InboxUsernameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InboxUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseOpeningExplorerLichessResponse parses an HTTP response from a OpeningExplorerLichessWithResponse call
func ParseOpeningExplorerLichessResponse(rsp *http.Response) (*OpeningExplorerLichessResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpeningExplorerLichessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OpeningExplorerJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOpeningExplorerMasterGameResponse parses an HTTP response from a OpeningExplorerMasterGameWithResponse call
func ParseOpeningExplorerMasterGameResponse(rsp *http.Response) (*OpeningExplorerMasterGameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpeningExplorerMasterGameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOpeningExplorerMasterResponse parses an HTTP response from a OpeningExplorerMasterWithResponse call
func ParseOpeningExplorerMasterResponse(rsp *http.Response) (*OpeningExplorerMasterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpeningExplorerMasterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OpeningExplorerJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOauthResponse parses an HTTP response from a OauthWithResponse call
func ParseOauthResponse(rsp *http.Response) (*OauthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OauthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlayerResponse parses an HTTP response from a PlayerWithResponse call
func ParsePlayerResponse(rsp *http.Response) (*PlayerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlayerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlayerTopNbPerfTypeResponse parses an HTTP response from a PlayerTopNbPerfTypeWithResponse call
func ParsePlayerTopNbPerfTypeResponse(rsp *http.Response) (*PlayerTopNbPerfTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlayerTopNbPerfTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOpeningExplorerPlayerResponse parses an HTTP response from a OpeningExplorerPlayerWithResponse call
func ParseOpeningExplorerPlayerResponse(rsp *http.Response) (*OpeningExplorerPlayerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OpeningExplorerPlayerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTablebaseStandardResponse parses an HTTP response from a TablebaseStandardWithResponse call
func ParseTablebaseStandardResponse(rsp *http.Response) (*TablebaseStandardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TablebaseStandardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TablebaseJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStreamerLiveResponse parses an HTTP response from a StreamerLiveWithResponse call
func ParseStreamerLiveResponse(rsp *http.Response) (*StreamerLiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StreamerLiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id     *string `json:"id,omitempty"`
			Name   *string `json:"name,omitempty"`
			Online *bool   `json:"online,omitempty"`
			Patron *bool   `json:"patron,omitempty"`
			Title  *string `json:"title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStudyExportAllPgnResponse parses an HTTP response from a StudyExportAllPgnWithResponse call
func ParseStudyExportAllPgnResponse(rsp *http.Response) (*StudyExportAllPgnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StudyExportAllPgnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStudyChapterPgnResponse parses an HTTP response from a StudyChapterPgnWithResponse call
func ParseStudyChapterPgnResponse(rsp *http.Response) (*StudyChapterPgnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StudyChapterPgnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSwissTrfResponse parses an HTTP response from a SwissTrfWithResponse call
func ParseSwissTrfResponse(rsp *http.Response) (*SwissTrfResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SwissTrfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTeamIdJoinResponse parses an HTTP response from a TeamIdJoinWithResponse call
func ParseTeamIdJoinResponse(rsp *http.Response) (*TeamIdJoinResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamIdJoinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTeamIdKickUserIdResponse parses an HTTP response from a TeamIdKickUserIdWithResponse call
func ParseTeamIdKickUserIdResponse(rsp *http.Response) (*TeamIdKickUserIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamIdKickUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTeamIdPmAllResponse parses an HTTP response from a TeamIdPmAllWithResponse call
func ParseTeamIdPmAllResponse(rsp *http.Response) (*TeamIdPmAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamIdPmAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseTeamIdQuitResponse parses an HTTP response from a TeamIdQuitWithResponse call
func ParseTeamIdQuitResponse(rsp *http.Response) (*TeamIdQuitResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamIdQuitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ok
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
